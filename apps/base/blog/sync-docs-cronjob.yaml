apiVersion: batch/v1
kind: CronJob
metadata:
  name: sync-docs
  namespace: blog
spec:
  schedule: "0 */6 * * *"  # Run every 6 hours
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: sync-docs
            image: alpine/git:2.40.1
            command:
            - /bin/sh
            - -c
            - |
              set -e
              
              # Install necessary tools
              apk add --no-cache bash findutils
              
              # Clone the repository (shallow clone for efficiency)
              echo "Cloning repository..."
              git clone --depth 1 https://github.com/lyzetam/fako-cluster.git /tmp/repo
              
              # Create target directories from central docs structure
              echo "Creating content directory structure..."
              mkdir -p /content/content/docs
              
              # Copy entire docs directory structure if it exists
              if [ -d "/tmp/repo/docs" ]; then
                echo "Copying documentation from central docs directory..."
                cp -r /tmp/repo/docs/* /content/content/docs/ 2>/dev/null || true
              fi
              
              # Also copy legacy documentation from various locations
              # This ensures backward compatibility while transitioning to central docs
              
              # Create legacy directories
              mkdir -p /content/content/docs/services/mcp-servers
              mkdir -p /content/content/docs/services/kubescape
              mkdir -p /content/content/docs/services/kagent
              mkdir -p /content/content/docs/services/headlamp
              mkdir -p /content/content/docs/services/housekeeping
              mkdir -p /content/content/docs/services/kube-bench
              mkdir -p /content/content/docs/services/gpustack-proxy
              mkdir -p /content/content/docs/services/oura
              
              # Copy legacy documentation files (if not already present from central docs)
              echo "Checking for legacy documentation files..."
              
              # MCP Server docs
              if [ -d "/tmp/repo/apps/base/mcp-servers/docs" ]; then
                for doc in /tmp/repo/apps/base/mcp-servers/docs/*.md; do
                  if [ -f "$doc" ]; then
                    filename=$(basename "$doc")
                    [ ! -f "/content/content/docs/services/mcp-servers/$filename" ] && cp "$doc" "/content/content/docs/services/mcp-servers/"
                  fi
                done
              fi
              
              # Other legacy service docs (only copy if not present)
              [ -f "/tmp/repo/apps/base/housekeeping/README.md" ] && [ ! -f "/content/content/docs/services/housekeeping/README.md" ] && cp "/tmp/repo/apps/base/housekeeping/README.md" "/content/content/docs/services/housekeeping/"
              [ -f "/tmp/repo/apps/base/kube-bench/README.md" ] && [ ! -f "/content/content/docs/services/kube-bench/README.md" ] && cp "/tmp/repo/apps/base/kube-bench/README.md" "/content/content/docs/services/kube-bench/"
              
              # Copy root README if not already in guides
              [ -f "/tmp/repo/README.md" ] && [ ! -f "/content/content/docs/guides/project-overview.md" ] && {
                mkdir -p /content/content/docs/guides
                cat > "/content/content/docs/guides/project-overview.md" <<EOF
              ---
              title: "Project Overview"
              weight: 1
              ---
              
              EOF
                cat "/tmp/repo/README.md" >> "/content/content/docs/guides/project-overview.md"
              }
              
              # Copy manifest validation report if not already present
              [ -f "/tmp/repo/manifest-validation-report.md" ] && [ ! -f "/content/content/docs/operations/manifest-validation-report.md" ] && {
                mkdir -p /content/content/docs/operations
                cp "/tmp/repo/manifest-validation-report.md" "/content/content/docs/operations/"
              }
              
              # Process all markdown files to add Hugo front matter
              echo "Processing markdown files for Hugo..."
              find /content/content/docs -name "*.md" -type f | while read -r file; do
                # Check if file already has front matter
                if ! head -n 1 "$file" | grep -q "^---"; then
                  # Get the title from the first # heading
                  title=$(grep "^# " "$file" | head -n 1 | sed 's/^# //')
                  if [ -z "$title" ]; then
                    # Generate title from filename
                    title=$(basename "$file" .md | sed 's/-/ /g' | sed 's/_/ /g' | sed 's/\b\(.\)/\u\1/g')
                  fi
                  
                  # Create temporary file with front matter
                  {
                    echo "---"
                    echo "title: \"$title\""
                    echo "date: $(date -Iseconds)"
                    echo "draft: false"
                    echo "---"
                    echo ""
                    cat "$file"
                  } > "${file}.tmp"
                  
                  mv "${file}.tmp" "$file"
                fi
              done
              
              echo "Documentation sync complete!"
              
              # Cleanup
              rm -rf /tmp/repo
            volumeMounts:
            - name: content
              mountPath: /content
            resources:
              requests:
                memory: "128Mi"
                cpu: "100m"
              limits:
                memory: "256Mi"
                cpu: "200m"
            securityContext:
              runAsNonRoot: true
              runAsUser: 1000
              runAsGroup: 1000
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: false
              capabilities:
                drop:
                - ALL
          restartPolicy: OnFailure
          volumes:
          - name: content
            persistentVolumeClaim:
              claimName: blog-content
          securityContext:
            fsGroup: 1000
