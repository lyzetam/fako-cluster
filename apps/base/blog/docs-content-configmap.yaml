apiVersion: v1
kind: ConfigMap
metadata:
  name: docs-content
  namespace: blog
data:
  copy-docs.sh: |
    #!/bin/sh
    set -e
    
    echo "Starting documentation migration..."
    
    # Create directories if they don't exist
    mkdir -p /content/content/docs/services/mcp-servers
    mkdir -p /content/content/docs/services/kubescape
    mkdir -p /content/content/docs/services/kagent
    mkdir -p /content/content/docs/services/headlamp
    mkdir -p /content/content/docs/services/housekeeping
    mkdir -p /content/content/docs/services/kube-bench
    mkdir -p /content/content/docs/services/gpustack-proxy
    mkdir -p /content/content/docs/services/oura
    mkdir -p /content/content/docs/architecture
    mkdir -p /content/content/docs/guides
    
    # Copy MCP Server docs
    for doc in /docs/mcp-servers/*.md; do
      if [ -f "$doc" ]; then
        filename=$(basename "$doc")
        cp "$doc" "/content/content/docs/services/mcp-servers/$filename"
        echo "Copied: mcp-servers/$filename"
      fi
    done
    
    # Copy Kubescape docs
    for doc in /docs/kubescape/*.md; do
      if [ -f "$doc" ]; then
        filename=$(basename "$doc")
        cp "$doc" "/content/content/docs/services/kubescape/$filename"
        echo "Copied: kubescape/$filename"
      fi
    done
    
    # Copy Kagent docs
    for doc in /docs/kagent/*.md; do
      if [ -f "$doc" ]; then
        filename=$(basename "$doc")
        cp "$doc" "/content/content/docs/services/kagent/$filename"
        echo "Copied: kagent/$filename"
      fi
    done
    
    # Copy Headlamp docs
    for doc in /docs/headlamp/*.md; do
      if [ -f "$doc" ]; then
        filename=$(basename "$doc")
        cp "$doc" "/content/content/docs/services/headlamp/$filename"
        echo "Copied: headlamp/$filename"
      fi
    done
    
    # Copy other service docs
    [ -f "/docs/housekeeping/README.md" ] && cp "/docs/housekeeping/README.md" "/content/content/docs/services/housekeeping/index.md"
    [ -f "/docs/kube-bench/README.md" ] && cp "/docs/kube-bench/README.md" "/content/content/docs/services/kube-bench/index.md"
    [ -f "/docs/gpustack-proxy/README.md" ] && cp "/docs/gpustack-proxy/README.md" "/content/content/docs/services/gpustack-proxy/index.md"
    [ -f "/docs/oura-collector/README.md" ] && cp "/docs/oura-collector/README.md" "/content/content/docs/services/oura/index.md"
    
    # Copy architecture docs
    [ -f "/docs/notes/gpu-cpu-architecture.md" ] && cp "/docs/notes/gpu-cpu-architecture.md" "/content/content/docs/architecture/"
    [ -f "/docs/notes/image-version-recommendations.md" ] && cp "/docs/notes/image-version-recommendations.md" "/content/content/docs/guides/"
    
    # Copy root docs
    [ -f "/docs/README.md" ] && cp "/docs/README.md" "/content/content/docs/_index.md"
    [ -f "/docs/manifest-validation-report.md" ] && cp "/docs/manifest-validation-report.md" "/content/content/docs/operations/"
    
    echo "Documentation migration complete!"
    
    # Fix front matter for Hugo
    echo "Adding Hugo front matter to documentation files..."
    find /content/content/docs -name "*.md" -type f | while read -r file; do
      # Check if file already has front matter
      if ! head -n 1 "$file" | grep -q "^---"; then
        # Get the title from the first # heading
        title=$(grep "^# " "$file" | head -n 1 | sed 's/^# //')
        if [ -z "$title" ]; then
          title=$(basename "$file" .md | sed 's/-/ /g' | sed 's/\b\(.\)/\u\1/g')
        fi
        
        # Create temporary file with front matter
        {
          echo "---"
          echo "title: \"$title\""
          echo "---"
          echo ""
          cat "$file"
        } > "${file}.tmp"
        
        mv "${file}.tmp" "$file"
        echo "Added front matter to: $file"
      fi
    done
    
    echo "Documentation processing complete!"
