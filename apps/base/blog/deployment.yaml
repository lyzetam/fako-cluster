apiVersion: apps/v1
kind: Deployment
metadata:
  name: hugo-blog
  namespace: blog
  labels:
    app.kubernetes.io/name: hugo-blog
    app.kubernetes.io/component: blog
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hugo-blog
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hugo-blog
    spec:
      initContainers:
      - name: setup-hugo-site
        image: busybox:1.36
        command:
        - /bin/sh
        - -c
        - |
          # Just create the basic structure - we'll do Hugo setup in the main container
          mkdir -p /content/content/docs/services
          mkdir -p /content/content/docs/guides
          mkdir -p /content/content/docs/architecture
          mkdir -p /content/content/docs/security
          mkdir -p /content/content/docs/operations
          
          # Create homepage
          cat > /content/content/_index.md <<EOF
          ---
          title: "Fako Cluster Documentation"
          ---

          # Welcome to Fako Cluster Documentation

          This documentation site contains all the technical documentation for the Fako Cluster Kubernetes deployment.

          ## Quick Links

          - [Services Documentation](/docs/services) - Documentation for all deployed services
          - [Guides](/docs/guides) - How-to guides and tutorials
          - [Architecture](/docs/architecture) - System design and technical architecture
          - [Security](/docs/security) - Security configurations and best practices
          - [Operations](/docs/operations) - Operational procedures and runbooks

          ## Getting Started

          Browse the documentation using the navigation menu on the left, or use the search feature to find specific topics.
          EOF
          
          # Create section index files
          cat > /content/content/docs/_index.md <<EOF
          ---
          title: "Documentation"
          weight: 1
          bookFlatSection: true
          ---

          # Documentation

          Browse all documentation by category.
          EOF
          
          cat > /content/content/docs/services/_index.md <<EOF
          ---
          title: "Services"
          weight: 1
          ---

          # Services Documentation

          Documentation for all services deployed in the cluster.
          EOF
          
          cat > /content/content/docs/guides/_index.md <<EOF
          ---
          title: "Guides"
          weight: 2
          ---

          # Guides and Tutorials

          Step-by-step guides for common tasks.
          EOF
          
          cat > /content/content/docs/architecture/_index.md <<EOF
          ---
          title: "Architecture"
          weight: 3
          ---

          # Architecture Documentation

          System design and technical architecture documentation.
          EOF
          
          cat > /content/content/docs/security/_index.md <<EOF
          ---
          title: "Security"
          weight: 4
          ---

          # Security Documentation

          Security configurations and best practices.
          EOF
          
          cat > /content/content/docs/operations/_index.md <<EOF
          ---
          title: "Operations"
          weight: 5
          ---

          # Operations Documentation

          Operational procedures and runbooks.
          EOF
          
          echo "Basic site structure created"
        volumeMounts:
        - name: config
          mountPath: /config
        - name: content
          mountPath: /content
      
      - name: gather-docs
        image: busybox:1.36
        command:
        - /bin/sh
        - -c
        - |
          # Don't exit on errors - allow the container to complete even if some docs are missing
          set +e
          
          # Tools are pre-installed in chainguard git image
          
          # Skip repository cloning and documentation gathering for now
          echo "Skipping documentation gathering - no docs available yet"
          echo "Creating placeholder structure..."
          
          # Create placeholder files so the container succeeds
          mkdir -p /content/content/docs/services
          mkdir -p /content/content/docs/guides
          mkdir -p /content/content/docs/architecture
          mkdir -p /content/content/docs/security
          mkdir -p /content/content/docs/operations
          
          # Create a placeholder file
          cat > /content/content/docs/services/_index.md <<EOF
          ---
          title: "Services Documentation"
          ---
          
          # Services Documentation
          
          Documentation for services will be added here as it becomes available.
          EOF
          
          echo "Placeholder documentation structure created"
          exit 0
          
          # Execute the documentation copying script
          cp /scripts/copy-docs.sh /tmp/copy-docs.sh
          chmod +x /tmp/copy-docs.sh
          
          # Set up doc paths
          export DOCS_ROOT="/tmp/repo"
          
          # Run with adjusted paths
          sed -i 's|/docs/|/tmp/repo/apps/base/|g' /tmp/copy-docs.sh
          sed -i 's|/docs/notes/|/tmp/repo/notes/|g' /tmp/copy-docs.sh
          sed -i 's|/docs/README.md|/tmp/repo/README.md|g' /tmp/copy-docs.sh
          sed -i 's|/docs/manifest-validation-report.md|/tmp/repo/manifest-validation-report.md|g' /tmp/copy-docs.sh
          
          /tmp/copy-docs.sh
          
          # Cleanup
          rm -rf /tmp/repo
        volumeMounts:
        - name: content
          mountPath: /content
        - name: docs-scripts
          mountPath: /scripts
          
      containers:
      - name: hugo
        image: floryn90/hugo:0.134.0-ext-alpine
        command:
        - /bin/sh
        - -c
        - |
          # Check if site exists, if not create it
          if [ ! -f "/site/config.toml" ] && [ ! -f "/site/hugo.toml" ]; then
            cd /tmp
            hugo new site tempsite
            cp -r tempsite/* /site/
            rm -rf tempsite
            
            # Copy config if it exists
            if [ -f "/config/config.toml" ]; then
              cp /config/config.toml /site/config.toml
            fi
            
            # Copy content if it exists
            if [ -d "/site/content" ]; then
              cp -r /site/content/* /site/content/ 2>/dev/null || true
            fi
          fi
          
          # Start Hugo server
          cd /site
          hugo server --bind=0.0.0.0 --baseURL=https://blog.fako-cluster.local --appendPort=false --disableFastRender
        ports:
        - containerPort: 1313
          name: http
        volumeMounts:
        - name: content
          mountPath: /site
        - name: config
          mountPath: /config
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config
        configMap:
          name: hugo-config
      - name: docs-scripts
        configMap:
          name: docs-content
      - name: content
        persistentVolumeClaim:
          claimName: blog-content
      securityContext:
        fsGroup: 1000
