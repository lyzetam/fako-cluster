# Updated deployment.yaml for Keycloak 26.x
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
  namespace: keycloak
spec:
  replicas: 2  # Run 2 replicas for HA
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      serviceAccountName: keycloak
      
      # Spread pods across nodes
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - keycloak
              topologyKey: kubernetes.io/hostname
      
      initContainers:
      - name: database-init
        image: postgres:17-alpine
        env:
        - name: PGHOST
          value: postgres-cluster-rw.postgres.svc.cluster.local
        - name: PGPORT
          value: "5432"
        envFrom:
        - secretRef:
            name: aws-credentials-env
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Installing AWS CLI and jq..."
          apk add --no-cache aws-cli jq
          
          echo "Fetching credentials from AWS Secrets Manager..."
          
          # Get postgres superuser credentials with debugging
          echo "Fetching postgres/admin-credentials..."
          POSTGRES_CREDS=$(aws secretsmanager get-secret-value --secret-id postgres/admin-credentials --query SecretString --output text)
          echo "Raw postgres credentials response: $POSTGRES_CREDS"
          
          # Parse with debugging
          export PGUSER=$(echo "$POSTGRES_CREDS" | jq -r .username)
          export PGPASSWORD=$(echo "$POSTGRES_CREDS" | jq -r .password)
          
          echo "PGUSER: $PGUSER"
          echo "PGPASSWORD is set: $([ ! -z "$PGPASSWORD" ] && echo 'YES' || echo 'NO')"
          
          # Get keycloak user credentials with debugging
          echo "Fetching auth-service/super-user..."
          KEYCLOAK_CREDS=$(aws secretsmanager get-secret-value --secret-id auth-service/super-user --query SecretString --output text)
          echo "Raw keycloak credentials response: $KEYCLOAK_CREDS"
          
          KC_USER=$(echo "$KEYCLOAK_CREDS" | jq -r .username)
          KC_PASS=$(echo "$KEYCLOAK_CREDS" | jq -r .password)
          
          echo "KC_USER: $KC_USER"
          echo "KC_PASS is set: $([ ! -z "$KC_PASS" ] && echo 'YES' || echo 'NO')"
          
          # Exit if credentials are not properly set
          if [ -z "$PGUSER" ] || [ -z "$PGPASSWORD" ] || [ "$PGUSER" = "null" ]; then
            echo "ERROR: Failed to retrieve postgres credentials"
            echo "Please check that AWS Secrets Manager contains the expected format"
            exit 1
          fi
          
          if [ -z "$KC_USER" ] || [ -z "$KC_PASS" ] || [ "$KC_USER" = "null" ]; then
            echo "ERROR: Failed to retrieve keycloak credentials"
            echo "Please check that AWS Secrets Manager contains the expected format"
            exit 1
          fi
          
          echo "Checking database setup..."
          
          # Check if database exists
          DB_EXISTS=$(psql -tAc "SELECT 1 FROM pg_database WHERE datname='keycloak'" 2>/dev/null || echo "")
          
          if [ "$DB_EXISTS" = "1" ]; then
            echo "Database 'keycloak' already exists"
          else
            echo "Creating database 'keycloak'..."
            psql -c "CREATE DATABASE keycloak;"
          fi
          
          # Check if user exists
          USER_EXISTS=$(psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='$KC_USER'" 2>/dev/null || echo "")
          
          if [ "$USER_EXISTS" = "1" ]; then
            echo "User '$KC_USER' already exists"
          else
            echo "Creating user '$KC_USER'..."
            psql -c "CREATE USER $KC_USER WITH ENCRYPTED PASSWORD '$KC_PASS';"
          fi
          
          # Always ensure privileges are correct
          echo "Ensuring privileges..."
          psql -c "GRANT ALL PRIVILEGES ON DATABASE keycloak TO $KC_USER;"
          PGDATABASE=keycloak psql -c "GRANT ALL ON SCHEMA public TO $KC_USER;"
          PGDATABASE=keycloak psql -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO $KC_USER;"
          PGDATABASE=keycloak psql -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO $KC_USER;"
          
          echo "Database initialization completed!"
      
      containers:
      - name: keycloak
        image: quay.io/keycloak/keycloak:26.2.5  # Use specific version instead of latest
        args: ["start"]
        env:
        # Admin credentials
        - name: KC_BOOTSTRAP_ADMIN_USERNAME
          value: admin
        - name: KC_BOOTSTRAP_ADMIN_PASSWORD
          value: admin
        
        # FIXED: Correct hostname configuration for Keycloak 26.x
        - name: KC_HOSTNAME
          value: auth.landryzetam.net
        - name: KC_HOSTNAME_STRICT
          value: "false"  # Allow backend URLs to use different hostnames
        - name: KC_HOSTNAME_STRICT_HTTPS
          value: "false"  # Allow HTTP for backend (since we're behind a proxy)
        - name: KC_PROXY_HEADERS
          value: "xforwarded"  # Trust X-Forwarded headers from proxy
        - name: KC_HTTP_ENABLED
          value: "true"
        
        # Database configuration
        - name: KC_DB
          value: postgres
        - name: KC_DB_URL
          value: jdbc:postgresql://postgres-cluster-rw.postgres.svc.cluster.local:5432/keycloak
        
        # DB credentials from External Secret
        - name: KC_DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: keycloak-postgres-credentials
              key: KC_DB_USERNAME
        - name: KC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keycloak-postgres-credentials
              key: KC_DB_PASSWORD
        
        # Additional production settings
        - name: KC_HEALTH_ENABLED
          value: "true"
        - name: KC_METRICS_ENABLED
          value: "true"
        
        # Clustering settings for HA
        - name: KC_CACHE_STACK
          value: kubernetes
        - name: JAVA_OPTS_APPEND
          value: "-Djgroups.dns.query=keycloak-headless.keycloak.svc.cluster.local"
        
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 7800
          name: jgroups
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 15
          failureThreshold: 5
        
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
---
# Headless service for JGroups clustering
apiVersion: v1
kind: Service
metadata:
  name: keycloak-headless
  namespace: keycloak
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: jgroups
      port: 7800
      targetPort: 7800
      protocol: TCP
  selector:
    app: keycloak