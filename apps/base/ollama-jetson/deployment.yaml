apiVersion: apps/v1
kind: Deployment
metadata:
  name: ollama-jetson
  namespace: ollama-jetson
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: ollama-jetson
  template:
    metadata:
      labels:
        app: ollama-jetson
    spec:
      securityContext:
        fsGroup: 1000
      # Target the jetson01 node
      nodeSelector:
        kubernetes.io/hostname: jetson01
      
      # Use NVIDIA runtime for GPU support
      runtimeClassName: nvidia
      
      # Tolerate the jetson taint to allow scheduling on Jetson nodes
      tolerations:
      - key: "node-type"
        operator: "Equal"
        value: "jetson"
        effect: "NoSchedule"

      # Enable host memory access for large models
      hostIPC: true
      
      containers:
      - name: ollama
        # Use latest ollama image which has better Jetson support
        image: ollama/ollama:latest
        ports:
        - containerPort: 11434
          protocol: TCP
        envFrom:
        - configMapRef:
            name: ollama-configmap
        - configMapRef:
            name: ollama-gpu-configmap
        
        volumeMounts:
        - mountPath: /root/.ollama
          name: ollama-jetson-models
        
        resources:
          requests:
            memory: "3Gi"     # Ensure enough for model
            cpu: "2500m"      # 2.5 cores
          limits:
            nvidia.com/gpu: 1 # Request 1 GPU
            memory: "6.5Gi"   # Reserve 1Gi for system (7.6GB total - 1GB = 6.6GB)
            cpu: "5000m"      # Use 5 cores, reserve 1 for system
        
        # Add startup probe for model loading
        startupProbe:
          httpGet:
            path: /api/tags
            port: 11434
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30  # Allow up to 5 minutes for initial model load
        
        livenessProbe:
          httpGet:
            path: /api/tags
            port: 11434
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/tags
            port: 11434
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
      
      # Model manager sidecar - simplified to use environment configurations
      - name: model-manager
        image: ollama/ollama:latest
        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "Model manager starting..."
          sleep 60
          
          export OLLAMA_HOST=http://localhost:11434
          
          # Download granite3.3:2b model (primary model - works well with voice pipelines)
          echo "Pulling granite3.3:2b model..."
          ollama pull granite3.3:2b || echo "Failed to pull granite3.3:2b"
          
          # Download cogito:3b model (secondary model)
          # NOTE: cogito:3b may expose function/tool calling in responses which can interfere
          # with voice assistant pipelines. Use granite3.3:2b for voice-based interactions.
          echo "Pulling cogito:3b model..."
          ollama pull cogito:3b || echo "Failed to pull cogito:3b"
          
          # Pre-load granite3.3:2b model as primary (preferred for voice pipelines)
          # This model provides clean responses without exposing internal tools/functions
          echo "Pre-loading granite3.3:2b model to memory..."
          ollama run granite3.3:2b "Initialize" || echo "Failed to pre-load granite3.3:2b"
          
          echo "Model setup complete. Primary model granite3.3:2b (voice-optimized) is loaded with environment configurations:"
          echo "- Context: 8192 (from OLLAMA_CONTEXT_LENGTH)"
          echo "- Batch: 256 (from OLLAMA_BATCH_SIZE)"
          echo "- GPU Layers: 999 (from OLLAMA_GPU_LAYERS)"
          echo "- Keep Alive: 24h (from OLLAMA_KEEP_ALIVE)"
          echo ""
          echo "Available models:"
          ollama list
          
          # Simple heartbeat loop (optional since OLLAMA_KEEP_ALIVE=24h handles this)
          while true; do
            sleep 300  # 5 minutes
            echo "Model manager heartbeat - granite3.3:2b should remain loaded via OLLAMA_KEEP_ALIVE=24h"
            # Check if primary model is still loaded
            ollama list | grep -q "granite3.3:2b" || {
              echo "Primary model granite3.3:2b not found in list, attempting to reload..."
              ollama run granite3.3:2b "Initialize" > /dev/null 2>&1
            }
          done
        
        volumeMounts:
        - mountPath: /root/.ollama
          name: ollama-jetson-models
        resources:
          requests:
            memory: "500Mi"  
            cpu: "250m"     
          limits:
            memory: "1Gi"
            cpu: "500m"
      
      volumes:
      - name: ollama-jetson-models
        persistentVolumeClaim:
          claimName: ollama-jetson-models
