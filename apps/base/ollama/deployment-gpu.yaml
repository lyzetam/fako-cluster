# apps/base/ollama/deployment-gpu.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ollama-gpu
  namespace: ollama
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: ollama-gpu
  template:
    metadata:
      labels:
        app: ollama-gpu
    spec:
      securityContext:
        fsGroup: 1000
      # Target the aitower node with dual GPUs
      nodeSelector:
        kubernetes.io/hostname: aitower
        nvidia.com/gpu.present: "true"
      
      # Add GPU tolerations
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      
      # Use nvidia RuntimeClass that exists
      runtimeClassName: nvidia

       # Enable host memory access for large models
      hostIPC: true
      
      containers:
      - name: ollama
        image: ollama/ollama:0.12.3
        ports:
        - containerPort: 11434
          protocol: TCP
        env:
        - name: NVIDIA_VISIBLE_DEVICES
          value: "GPU-da81442d-aa44-f32e-877c-57e59ed0bb8b"  # RTX 5060
        envFrom:
        - configMapRef:
            name: ollama-configmap
        - configMapRef:
            name: ollama-gpu-configmap
        
        volumeMounts:
        - mountPath: /root/.ollama
          name: ollama-models
        # - mountPath: /dev/shm
        #   name: dev-shm



        resources:
          requests:
            memory: "12Gi"
            cpu: "4000m"
            nvidia.com/gpu: 1  # Request 1 GPU (RTX 5060 via NVIDIA_VISIBLE_DEVICES)
          limits:
            memory: "36Gi"
            cpu: "8000m"
            nvidia.com/gpu: 1  # Limit to 1 GPU
        
        livenessProbe:
          httpGet:
            path: /api/tags
            port: 11434
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/tags
            port: 11434
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
      
      # Model manager sidecar
      - name: model-manager
        image: ollama/ollama:0.11.2
        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "Model manager starting..."
          sleep 60
          
          export OLLAMA_HOST=http://localhost:11434
          
          echo "Downloading models for RTX 5060..."
          
          # PRIORITY 1: llama3.1:8b - Primary Default Model
          echo ""
          echo "=== PRIMARY DEFAULT MODEL ==="
          ollama pull llama3.1:8b || echo "Failed llama3.1:8b"
          
          # PRIORITY 2: Home Assistant specialized models
          echo ""
          echo "=== HOME ASSISTANT SPECIALIZED MODELS ==="
          # ollama pull granite3-moe:1b || echo "Failed granite3-moe:1b"
          ollama pull granite3.3:8b || echo "Failed granite3.3:8b"

          # PRIORITY 2: Latest Gemma models
          echo ""
          echo "=== GEMMA 3 MODELS ==="
          # ollama pull gemma2:2b || echo "Failed gemma2:2b"
          # ollama pull gemma2:9b || echo "Failed gemma2:9b"  # Larger model for RTX 5070

          # PRIORITY 3: Small efficient models
          echo ""
          echo "=== SMALL EFFICIENT MODELS (1-4B) ==="
          ollama pull qwen2.5:0.5b || echo "Failed qwen2.5:0.5b"
          # ollama pull llama3.2:3b || echo "Failed llama3.2:3b"
          # ollama pull phi3:mini || echo "Failed phi3:mini"
          
          # PRIORITY 4: Medium models - RTX 5060 can handle these well
          echo ""
          echo "=== MEDIUM MODELS (7-8B) ==="
          ollama pull qwen3:8b || echo "Failed qwen3:8b"
          ollama pull deepseek-coder:6.7b-instruct || echo "Failed deepseek-coder:6.7b-instruct"
          
          # PRIORITY 4.5: Enhanced DeepSeek R1 Coder for autonomous agents
          echo ""
          echo "=== DEEPSEEK R1 CODER TOOLS (Enhanced for Cline) ==="
          ollama pull ishumilin/deepseek-r1-coder-tools:14b || echo "Failed ishumilin/deepseek-r1-coder-tools:14b"
          ollama pull deepseek-r1:14b || echo "Failed deepseek-r1:14b"
          # ollama pull mistral:7b-instruct-v0.3-q5_K_M || echo "Failed mistral:7b"
          # ollama pull qwen2.5:7b-instruct-q5_K_M || echo "Failed qwen2.5:7b"
          # ollama pull orieg/gemma3-tools:4b || echo "Failed gemma3-tools:4b"

          # PRIORITY 5: Larger models - RTX 5060 has the memory
          echo ""
          echo "=== LARGER MODELS (13B+) ==="
          ollama pull qwen:32b || echo "Failed qwen:32b"
          # ollama pull llama2:13b-chat-q4_K_M || echo "Failed llama2:13b"
          # ollama pull deepseek-r1:14b || echo "Failed deepseek-r1:14b"
          # ollama pull phi-4:latest || echo "Failed phi-4"
          # ollama pull orieg/gemma3-tools:27b || echo "Failed gemma3-tools:27b"
          # ollama pull orieg/gemma3-tools:12b || echo "Failed gemma3-tools:12b"

          # PRIORITY 6: Even larger models for RTX 5060
          echo ""
          echo "=== HIGH-END MODELS ==="
          # ollama pull mixtral:8x7b-instruct-v0.1-q3_K_M || echo "Failed mixtral"
          # ollama pull llama3.3:latest || echo "Failed llama3.3 70B"
          
          echo "Model download complete."
          ollama list
          
          # Pre-load llama3.1:8b model into GPU memory and keep for 24h
          echo ""
          echo "=== PRE-LOADING PRIMARY MODEL ==="
          echo "Pre-loading llama3.1:8b model into GPU memory..."
          ollama run llama3.1:8b "Initialize model in GPU memory" || echo "Failed to pre-load llama3.1:8b"
          
          echo "llama3.1:8b model loaded with 24h keep-alive (OLLAMA_KEEP_ALIVE=24h from config)"
          echo "Model will remain in GPU memory for 24 hours"
          
          while true; do
            sleep 600
            echo "Model manager heartbeat..."
            # Verify llama3.1:8b is still loaded
            ollama list | grep -q "llama3.1:8b" || {
              echo "Primary model llama3.1:8b not found, reloading..."
              ollama run llama3.1:8b "Reload into GPU memory" > /dev/null 2>&1
            }
          done
        
        volumeMounts:
        - mountPath: /root/.ollama
          name: ollama-models
        resources:
          requests:
            memory: "1Gi"  
            cpu: "500m"     
          limits:
            memory: "2Gi"
            cpu: "1000m"
      
      volumes:
      - name: ollama-models
        persistentVolumeClaim:
          claimName: ollama-models
