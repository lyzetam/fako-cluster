# apps/base/whisper/deployment-gpu-sidecar.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: whisper-gpu
  namespace: whisper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: whisper-gpu
  template:
    metadata:
      labels:
        app: whisper-gpu
    spec:
      # Same GPU setup as Ollama
      nodeSelector:
        kubernetes.io/hostname: yeezyai
        nvidia.com/gpu: "true"
      
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      
      runtimeClassName: nvidia
      
      initContainers:
      # Setup CUDA libraries in shared volume
      - name: cuda-setup
        image: nvidia/cuda:12.2.0-cudnn8-runtime-ubuntu22.04
        command:
        - /bin/bash
        - -c
        - |
          echo "=== Setting up CUDA libraries ==="
          
          # Create directories
          mkdir -p /shared/usr/lib/x86_64-linux-gnu
          mkdir -p /shared/usr/local/cuda/lib64
          
          # Copy all CUDA and CUDNN libraries
          cp -r /usr/lib/x86_64-linux-gnu/libcud* /shared/usr/lib/x86_64-linux-gnu/ || true
          cp -r /usr/local/cuda/lib64/* /shared/usr/local/cuda/lib64/ || true
          
          # Create all possible symlinks for CUDNN
          cd /shared/usr/lib/x86_64-linux-gnu
          for file in libcudnn*.so.*; do
            if [ -f "$file" ]; then
              # Create symlinks for all versions
              ln -sf "$file" libcudnn.so || true
              ln -sf "$file" libcudnn.so.8 || true
              ln -sf "$file" libcudnn.so.9 || true
              ln -sf "$file" libcudnn_ops.so || true
              ln -sf "$file" libcudnn_ops.so.9 || true
              ln -sf "$file" libcudnn_ops.so.9.1 || true
              ln -sf "$file" libcudnn_ops.so.9.1.0 || true
            fi
          done
          
          echo "=== Libraries prepared ==="
          ls -la /shared/usr/lib/x86_64-linux-gnu/libcud*
          
        volumeMounts:
        - name: shared-libs
          mountPath: /shared
        resources:
          limits:
            nvidia.com/gpu: 1
      
      containers:
      # Main Wyoming Whisper container
      - name: whisper
        image: rhasspy/wyoming-whisper:latest
        ports:
        - containerPort: 10300
          protocol: TCP
        args:
        - "--model"
        - "tiny"  # Start with tiny model
        - "--uri"
        - "tcp://0.0.0.0:10300"
        - "--data-dir"
        - "/data"
        - "--download-dir"
        - "/data"
        - "--language"
        - "en"
        - "--device"
        - "cuda"
        - "--compute-type"
        - "float16"
        
        volumeMounts:
        - mountPath: /data
          name: whisper-models
        # Mount CUDA libraries from shared volume
        - mountPath: /usr/lib/x86_64-linux-gnu
          name: shared-libs
          subPath: usr/lib/x86_64-linux-gnu
        - mountPath: /usr/local/cuda
          name: shared-libs
          subPath: usr/local/cuda
        
        env:
        - name: CUDA_VISIBLE_DEVICES
          value: "1"  # Use RTX 3050 like you specified
        - name: NVIDIA_VISIBLE_DEVICES
          value: "1"
        - name: NVIDIA_DRIVER_CAPABILITIES
          value: "compute,utility"
        - name: LD_LIBRARY_PATH
          value: "/usr/local/cuda/lib64:/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"
        
        resources:
          requests:
            memory: "4Gi"
            cpu: "2000m"
            nvidia.com/gpu: 1
          limits:
            memory: "8Gi"
            cpu: "4000m"
            nvidia.com/gpu: 1
        
        livenessProbe:
          tcpSocket:
            port: 10300
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 5
        readinessProbe:
          tcpSocket:
            port: 10300
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
      
      # CUDA library provider sidecar (keeps libraries available)
      - name: cuda-provider
        image: nvidia/cuda:12.2.0-cudnn8-runtime-ubuntu22.04
        command: ["/bin/sh", "-c", "sleep infinity"]
        volumeMounts:
        - name: shared-libs
          mountPath: /shared
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      
      volumes:
      - name: whisper-models
        persistentVolumeClaim:
          claimName: whisper-models
      - name: shared-libs
        emptyDir: 
          sizeLimit: 2Gi

# # apps/base/whisper/deployment-gpu-flexible.yaml
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: whisper-gpu
#   namespace: whisper
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: whisper-gpu
#   template:
#     metadata:
#       labels:
#         app: whisper-gpu
#     spec:
#       # Use nvidia RuntimeClass that exists
#       runtimeClassName: nvidia
      
#       # Target the new yeezyai node with dual GPUs
#       nodeSelector:
#         kubernetes.io/hostname: yeezyai
#         nvidia.com/gpu: "true"
      
#       tolerations:
#       - key: nvidia.com/gpu
#         operator: Exists
#         effect: NoSchedule
      
#       containers:
#       - name: whisper
#         image: rhasspy/wyoming-whisper:latest
#         ports:
#         - containerPort: 10300
#           protocol: TCP
#         args:
#         - "--model"
#         - "base"  # Use base model instead of medium for RTX 3050
#         - "--uri"
#         - "tcp://0.0.0.0:10300"
#         - "--data-dir"
#         - "/data"
#         - "--download-dir"
#         - "/data"
#         - "--language"
#         - "en"
#         - "--beam-size"
#         - "5"
#         - "--device"
#         - "cuda"
#         - "--compute-type"
#         - "float16"
        
#         volumeMounts:
#         - mountPath: /data
#           name: whisper-models
        
#         resources:
#           requests:
#             memory: "3Gi"
#             cpu: "1500m"
#             nvidia.com/gpu: 1  # Request 1 GPU
#           limits:
#             memory: "6Gi"
#             cpu: "3000m"
#             nvidia.com/gpu: 1  # Limit to 1 GPU
        
#         env:
#         # Remove the hardcoded CUDA_VISIBLE_DEVICES
#         # Let Kubernetes handle GPU assignment
#         - name: NVIDIA_DRIVER_CAPABILITIES
#           value: "compute,utility"
#         - name: PYTORCH_CUDA_ALLOC_CONF
#           value: "max_split_size_mb:512"
#         # Add debug environment variable
#         - name: CUDA_LAUNCH_BLOCKING
#           value: "1"
        
#         livenessProbe:
#           tcpSocket:
#             port: 10300
#           initialDelaySeconds: 120
#           periodSeconds: 30
#           timeoutSeconds: 10
#           failureThreshold: 5
#         readinessProbe:
#           tcpSocket:
#             port: 10300
#           initialDelaySeconds: 30
#           periodSeconds: 10
#           timeoutSeconds: 5
#         startupProbe:
#           tcpSocket:
#             port: 10300
#           initialDelaySeconds: 10
#           periodSeconds: 10
#           failureThreshold: 30
      
#       volumes:
#       - name: whisper-models
#         persistentVolumeClaim:
#           claimName: whisper-models
