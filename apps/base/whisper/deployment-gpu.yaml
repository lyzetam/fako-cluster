# apps/base/whisper/deployment-gpu-complete.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: whisper-gpu
  namespace: whisper
  labels:
    app: whisper-gpu
    component: voice-pipeline
spec:
  replicas: 1
  selector:
    matchLabels:
      app: whisper-gpu
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: whisper-gpu
        component: voice-pipeline
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10300"
    spec:
      runtimeClassName: nvidia
      nodeSelector:
        kubernetes.io/hostname: playground
        nvidia.com/gpu: "true"
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      priorityClassName: system-cluster-critical
      
      initContainers:
      # Install CUDA libraries
      - name: cuda-installer
        image: nvidia/cuda:12.2.0-cudnn8-runtime-ubuntu22.04
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "=== CUDA Library Installer ==="
          
          # Update package list
          apt-get update -qq
          
          # Install required CUDA libraries
          apt-get install -y --no-install-recommends \
            libcublas-12-2 \
            libcublaslt-12-2 \
            libcudnn8=8.9.7.29-1+cuda12.2 \
            libcufft-12-2 \
            libcurand-12-2 \
            libcusolver-12-2 \
            libcusparse-12-2 \
            libnccl2 \
            libnccl-dev
          
          # Copy all CUDA libraries to shared volume
          echo "Copying CUDA libraries..."
          mkdir -p /cuda-libs/{lib64,lib,bin}
          
          # Copy libraries
          cp -Lr /usr/local/cuda/lib64/* /cuda-libs/lib64/ 2>/dev/null || true
          cp -Lr /usr/local/cuda/lib/* /cuda-libs/lib/ 2>/dev/null || true
          cp -Lr /usr/lib/x86_64-linux-gnu/libcudnn* /cuda-libs/lib64/ 2>/dev/null || true
          cp -Lr /usr/lib/x86_64-linux-gnu/libcublas* /cuda-libs/lib64/ 2>/dev/null || true
          cp -Lr /usr/lib/x86_64-linux-gnu/libnccl* /cuda-libs/lib64/ 2>/dev/null || true
          
          # Copy binaries
          cp -Lr /usr/local/cuda/bin/* /cuda-libs/bin/ 2>/dev/null || true
          
          echo "CUDA libraries installed successfully"
          echo "Contents of /cuda-libs/lib64:"
          ls -la /cuda-libs/lib64/ | head -20
        volumeMounts:
        - name: cuda-libs
          mountPath: /cuda-libs
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
      
      # GPU health check
      - name: gpu-health-check
        image: pytorch/pytorch:2.1.0-cuda12.1-cudnn8-runtime
        command:
        - python3
        - /scripts/health-check.py
        volumeMounts:
        - name: health-scripts
          mountPath: /scripts
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
            nvidia.com/gpu: 1
          limits:
            memory: "2Gi"
            cpu: "1000m"
            nvidia.com/gpu: 1
        env:
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
      
      containers:
      - name: whisper
        image: rhasspy/wyoming-whisper:latest
        ports:
        - containerPort: 10300
          name: wyoming
          protocol: TCP
        args:
        - "--model"
        - "small"  # Start with small, can be changed to medium/large
        - "--uri"
        - "tcp://0.0.0.0:10300"
        - "--data-dir"
        - "/data"
        - "--download-dir"
        - "/data"
        - "--device"
        - "cuda"
        - "--compute-type"
        - "float16"
        - "--beam-size"
        - "5"
        - "--language"
        - "en"
        volumeMounts:
        - mountPath: /data
          name: whisper-models
        - mountPath: /usr/local/cuda
          name: cuda-libs
          readOnly: true
        resources:
          requests:
            memory: "4Gi"
            cpu: "1500m"
            nvidia.com/gpu: 1
          limits:
            memory: "8Gi"
            cpu: "3000m"
            nvidia.com/gpu: 1
        env:
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        - name: NVIDIA_VISIBLE_DEVICES
          value: "all"
        - name: NVIDIA_DRIVER_CAPABILITIES
          value: "compute,utility"
        - name: LD_LIBRARY_PATH
          value: "/usr/local/cuda/lib64:/usr/local/cuda/lib:$LD_LIBRARY_PATH"
        - name: PATH
          value: "/usr/local/cuda/bin:$PATH"
        - name: PYTORCH_CUDA_ALLOC_CONF
          value: "max_split_size_mb:512"
        livenessProbe:
          tcpSocket:
            port: 10300
          initialDelaySeconds: 300
          periodSeconds: 60
          timeoutSeconds: 20
          failureThreshold: 3
        readinessProbe:
          tcpSocket:
            port: 10300
          initialDelaySeconds: 180
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 10
        startupProbe:
          tcpSocket:
            port: 10300
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 40
      
      # Sidecar for library management
      - name: library-manager
        image: busybox:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "Library manager started"
          # Monitor and log library status
          while true; do
            sleep 300
            echo "Library check at $(date)"
            ls -la /usr/local/cuda/lib64/ 2>/dev/null | head -5 || echo "No CUDA libs found"
          done
        volumeMounts:
        - mountPath: /usr/local/cuda
          name: cuda-libs
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      
      volumes:
      - name: whisper-models
        persistentVolumeClaim:
          claimName: whisper-models
      - name: cuda-libs
        emptyDir:
          sizeLimit: 10Gi
      - name: health-scripts
        configMap:
          name: whisper-gpu-health
          defaultMode: 0755


# # apps/base/whisper/deployment-gpu.yaml
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: whisper-gpu
#   namespace: whisper
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: whisper-gpu
#   strategy:
#     type: RollingUpdate
#   template:
#     metadata:
#       labels:
#         app: whisper-gpu
#     spec:
#       runtimeClassName: nvidia
#       nodeSelector:
#         kubernetes.io/hostname: playground
#         nvidia.com/gpu: "true"
#       tolerations:
#       - key: nvidia.com/gpu
#         operator: Exists
#         effect: NoSchedule
#       priorityClassName: system-cluster-critical
      
#       initContainers:
#       # Install missing CUDA libraries
#       - name: cuda-libs-installer
#         image: nvidia/cuda:12.2.0-runtime-ubuntu22.04
#         command:
#         - /bin/bash
#         - -c
#         - |
#           echo "Installing CUDA libraries..."
#           apt-get update
#           apt-get install -y --no-install-recommends \
#             libcudnn8=8.9.7.29-1+cuda12.2 \
#             libcudnn8-dev=8.9.7.29-1+cuda12.2 \
#             cuda-toolkit-12-2
          
#           # Copy libraries to shared volume
#           mkdir -p /cuda-libs/lib64
#           cp -r /usr/local/cuda/lib64/* /cuda-libs/lib64/ || true
#           cp -r /usr/lib/x86_64-linux-gnu/libcudnn* /cuda-libs/lib64/ || true
          
#           echo "CUDA libraries installed successfully"
#           ls -la /cuda-libs/lib64/
#         volumeMounts:
#         - name: cuda-libs
#           mountPath: /cuda-libs
#         resources:
#           requests:
#             memory: "1Gi"
#             cpu: "500m"
#           limits:
#             memory: "2Gi"
#             cpu: "1000m"
      
#       containers:
#       - name: whisper
#         image: rhasspy/wyoming-whisper:latest
#         ports:
#         - containerPort: 10300
#           protocol: TCP
#         args:
#         - "--model"
#         - "medium"  # Changed from small to medium for better accuracy
#         - "--uri"
#         - "tcp://0.0.0.0:10300"
#         - "--data-dir"
#         - "/data"
#         - "--download-dir"
#         - "/data"
#         - "--device"
#         - "cuda"
#         - "--compute-type"
#         - "float16"  # Use FP16 for better GPU performance
#         volumeMounts:
#         - mountPath: /data
#           name: whisper-models
#         - mountPath: /usr/local/cuda/lib64
#           name: cuda-libs
#           subPath: lib64
#         resources:
#           requests:
#             memory: "4Gi"
#             cpu: "1000m"
#             nvidia.com/gpu: 1
#           limits:
#             memory: "8Gi"
#             cpu: "2000m"
#             nvidia.com/gpu: 1
#         env:
#         - name: CUDA_VISIBLE_DEVICES
#           value: "0"
#         - name: NVIDIA_VISIBLE_DEVICES
#           value: "all"
#         - name: NVIDIA_DRIVER_CAPABILITIES
#           value: "compute,utility"
#         - name: LD_LIBRARY_PATH
#           value: "/usr/local/cuda/lib64:$LD_LIBRARY_PATH"
#         livenessProbe:
#           tcpSocket:
#             port: 10300
#           initialDelaySeconds: 180
#           periodSeconds: 30
#           timeoutSeconds: 10
#           failureThreshold: 5
#         readinessProbe:
#           tcpSocket:
#             port: 10300
#           initialDelaySeconds: 120
#           periodSeconds: 10
#           timeoutSeconds: 5
#           failureThreshold: 10
#         startupProbe:
#           tcpSocket:
#             port: 10300
#           initialDelaySeconds: 30
#           periodSeconds: 10
#           timeoutSeconds: 5
#           failureThreshold: 30
      
#       volumes:
#       - name: whisper-models
#         persistentVolumeClaim:
#           claimName: whisper-models
#       - name: cuda-libs
#         emptyDir: {}


# # # apps/base/whisper/deployment-gpu.yaml
# # apiVersion: apps/v1
# # kind: Deployment
# # metadata:
# #   name: whisper-gpu
# #   namespace: whisper
# # spec:
# #   replicas: 1
# #   selector:
# #     matchLabels:
# #       app: whisper-gpu
# #   strategy:
# #     type: RollingUpdate  # Important for GPU resources
# #   template:
# #     metadata:
# #       labels:
# #         app: whisper-gpu
# #     spec:
# #       runtimeClassName: nvidia
# #       nodeSelector:
# #         kubernetes.io/hostname: playground
# #         nvidia.com/gpu: "true"
# #       tolerations:
# #       - key: nvidia.com/gpu
# #         operator: Exists
# #         effect: NoSchedule
# #       # Priority to ensure it gets scheduled
# #       priorityClassName: system-cluster-critical
# #       containers:
# #         - name: whisper
# #           image: rhasspy/wyoming-whisper:latest
# #           ports:
# #             - containerPort: 10300
# #               protocol: TCP
# #           args:
# #             - "--model"
# #             - "small"
# #             - "--uri"
# #             - "tcp://0.0.0.0:10300"
# #             - "--data-dir"
# #             - "/data"
# #             - "--download-dir"
# #             - "/data"
# #             - "--device"
# #             - "cuda"  # Force CUDA/GPU mode
# #           volumeMounts:
# #             - mountPath: /data
# #               name: whisper-models
# #           resources:
# #             requests:
# #               memory: "3Gi"
# #               cpu: "1000m"
# #               nvidia.com/gpu: 1  # Request 1 GPU
# #             limits:
# #               memory: "6Gi"
# #               cpu: "2000m"
# #               nvidia.com/gpu: 1  # Limit to 1 GPU
# #           env:
# #             - name: CUDA_VISIBLE_DEVICES
# #               value: "0"
# #             - name: NVIDIA_VISIBLE_DEVICES
# #               value: "all"
# #             - name: NVIDIA_DRIVER_CAPABILITIES
# #               value: "compute,utility"
# #           livenessProbe:
# #             tcpSocket:
# #               port: 10300
# #             initialDelaySeconds: 180
# #             periodSeconds: 30
# #             timeoutSeconds: 10
# #             failureThreshold: 5
# #           readinessProbe:
# #             tcpSocket:
# #               port: 10300
# #             initialDelaySeconds: 120
# #             periodSeconds: 10
# #             timeoutSeconds: 5
# #             failureThreshold: 10
# #       volumes:
# #         - name: whisper-models
# #           persistentVolumeClaim:
# #             claimName: whisper-models
