# apps/base/whisper/deployment-gpu.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: whisper-gpu
  namespace: whisper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: whisper-gpu
  template:
    metadata:
      labels:
        app: whisper-gpu
    spec:
      nodeSelector:
        kubernetes.io/hostname: yeezyai
        nvidia.com/gpu: "true"
      
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      
      runtimeClassName: nvidia
      
      containers:
      - name: whisper
        image: ghcr.io/slackr31337/wyoming-whisper-gpu:latest
        ports:
        - containerPort: 10300
          protocol: TCP
        env:
        - name: MODEL
          value: "tiny"  # Try without int8 optimization
        - name: LANGUAGE
          value: "en"
        - name: COMPUTE_TYPE
          value: "float16"  # Try float16 instead of int8
        - name: BEAM_SIZE
          value: "1"
        - name: NVIDIA_VISIBLE_DEVICES
          value: "all"
        - name: NVIDIA_DRIVER_CAPABILITIES
          value: "compute,utility"
        # Remove CUDA_VISIBLE_DEVICES to allow any GPU
        
        volumeMounts:
        - mountPath: /data
          name: whisper-models
        
        resources:
          requests:
            memory: "4Gi"
            cpu: "2000m"
            nvidia.com/gpu: 1
          limits:
            memory: "8Gi"
            cpu: "4000m"
            nvidia.com/gpu: 1
        
        livenessProbe:
          tcpSocket:
            port: 10300
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 10300
          initialDelaySeconds: 45
          periodSeconds: 10
          timeoutSeconds: 5
      
      volumes:
      - name: whisper-models
        persistentVolumeClaim:
          claimName: whisper-models

# # apps/base/whisper/deployment-gpu-flexible.yaml
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: whisper-gpu
#   namespace: whisper
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: whisper-gpu
#   template:
#     metadata:
#       labels:
#         app: whisper-gpu
#     spec:
#       # Use nvidia RuntimeClass that exists
#       runtimeClassName: nvidia
      
#       # Target the new yeezyai node with dual GPUs
#       nodeSelector:
#         kubernetes.io/hostname: yeezyai
#         nvidia.com/gpu: "true"
      
#       tolerations:
#       - key: nvidia.com/gpu
#         operator: Exists
#         effect: NoSchedule
      
#       containers:
#       - name: whisper
#         image: rhasspy/wyoming-whisper:latest
#         ports:
#         - containerPort: 10300
#           protocol: TCP
#         args:
#         - "--model"
#         - "base"  # Use base model instead of medium for RTX 3050
#         - "--uri"
#         - "tcp://0.0.0.0:10300"
#         - "--data-dir"
#         - "/data"
#         - "--download-dir"
#         - "/data"
#         - "--language"
#         - "en"
#         - "--beam-size"
#         - "5"
#         - "--device"
#         - "cuda"
#         - "--compute-type"
#         - "float16"
        
#         volumeMounts:
#         - mountPath: /data
#           name: whisper-models
        
#         resources:
#           requests:
#             memory: "3Gi"
#             cpu: "1500m"
#             nvidia.com/gpu: 1  # Request 1 GPU
#           limits:
#             memory: "6Gi"
#             cpu: "3000m"
#             nvidia.com/gpu: 1  # Limit to 1 GPU
        
#         env:
#         # Remove the hardcoded CUDA_VISIBLE_DEVICES
#         # Let Kubernetes handle GPU assignment
#         - name: NVIDIA_DRIVER_CAPABILITIES
#           value: "compute,utility"
#         - name: PYTORCH_CUDA_ALLOC_CONF
#           value: "max_split_size_mb:512"
#         # Add debug environment variable
#         - name: CUDA_LAUNCH_BLOCKING
#           value: "1"
        
#         livenessProbe:
#           tcpSocket:
#             port: 10300
#           initialDelaySeconds: 120
#           periodSeconds: 30
#           timeoutSeconds: 10
#           failureThreshold: 5
#         readinessProbe:
#           tcpSocket:
#             port: 10300
#           initialDelaySeconds: 30
#           periodSeconds: 10
#           timeoutSeconds: 5
#         startupProbe:
#           tcpSocket:
#             port: 10300
#           initialDelaySeconds: 10
#           periodSeconds: 10
#           failureThreshold: 30
      
#       volumes:
#       - name: whisper-models
#         persistentVolumeClaim:
#           claimName: whisper-models
