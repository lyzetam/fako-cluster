# apps/base/node-labeling/label-nodes-cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: label-nodes-for-architecture
  namespace: node-labeling
spec:
  # Run every 15 minutes to ensure nodes stay properly labeled
  schedule: "*/15 * * * *"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 300
      template:
        spec:
          serviceAccountName: node-labeler
          restartPolicy: Never
          containers:
          - name: labeler
            image: bitnami/kubectl:1.33
            command:
            - /bin/bash
            - -c
            - |
              echo "=== Node Architecture Labeling ($(date)) ==="
              
              # Function to safely apply label
              apply_label() {
                local node=$1
                local label=$2
                echo -n "  Applying $label to $node: "
                if kubectl label nodes "$node" "$label" --overwrite 2>&1; then
                  echo "✓"
                else
                  echo "✗ (may already exist)"
                fi
              }
              
              # Function to remove taint
              remove_taint() {
                local node=$1
                local taint=$2
                echo -n "  Removing taint $taint from $node: "
                if kubectl taint nodes "$node" "$taint"- 2>&1; then
                  echo "✓"
                else
                  echo "✗ (may not exist)"
                fi
              }
              
              # Label yeezyai as dual-GPU node with ALL required labels
              echo "Labeling yeezyai node with complete GPU labels..."
              if kubectl get node yeezyai > /dev/null 2>&1; then
                # Essential GPU labels
                apply_label yeezyai "nvidia.com/gpu=true"
                apply_label yeezyai "node-role.kubernetes.io/gpu-worker=true"
                
                # Hardware tier and architecture
                apply_label yeezyai "hardware.tier=dual-gpu"
                apply_label yeezyai "node-type=gpu-compute"
                apply_label yeezyai "kubernetes.io/arch=amd64"
                apply_label yeezyai "node.kubernetes.io/architecture=x86_64"
                
                # GPU-specific labels
                apply_label yeezyai "gpu.nvidia.present=true"
                apply_label yeezyai "accelerator=nvidia-gpu"
                apply_label yeezyai "feature.node.kubernetes.io/pci-10de.present=true"
                
                # Dual GPU specific labels
                apply_label yeezyai "gpu.count=2"
                apply_label yeezyai "gpu.rtx5070=true"
                apply_label yeezyai "gpu.rtx3050=true"
                
                # Voice pipeline
                apply_label yeezyai "voice-pipeline=enabled"
              else
                echo "WARNING: yeezyai node not found!"
              fi
              
              # Label high-performance x86 nodes
              echo -e "\nLabeling high-performance x86 nodes..."
              for node in pgbee aitower; do
                if kubectl get node $node > /dev/null 2>&1; then
                  echo "Labeling $node as high-performance x86..."
                  apply_label $node "hardware.tier=high-performance"
                  apply_label $node "voice-pipeline=enabled"
                  apply_label $node "kubernetes.io/arch=amd64"
                  apply_label $node "node.kubernetes.io/architecture=x86_64"
                fi
              done
              
              # Label standard x86 nodes
              echo -e "\nLabeling standard x86 nodes..."
              for node in pglenovo01 pglenovo02 thinkpad01; do
                if kubectl get node $node > /dev/null 2>&1; then
                  echo "Labeling $node as standard x86..."
                  apply_label $node "hardware.tier=standard"
                  apply_label $node "kubernetes.io/arch=amd64"
                  apply_label $node "node.kubernetes.io/architecture=x86_64"
                fi
              done
              
              # Label ARM nodes (including Mac and Jetson) - NO TAINTS for Jetson
              echo -e "\nLabeling ARM nodes..."
              
              # Mac ARM nodes - keep isolated
              for node in zz-macbookpro pgmac01 pgmac02; do
                if kubectl get node $node > /dev/null 2>&1; then
                  echo "Labeling $node as ARM Mac..."
                  apply_label $node "kubernetes.io/arch=arm64"
                  apply_label $node "node.kubernetes.io/architecture=arm64"
                  apply_label $node "hardware.tier=arm-mac"
                  apply_label $node "node-type=arm"
                  
                  # Keep Mac nodes tainted
                  kubectl taint nodes $node node-type=arm-mac:NoSchedule --overwrite 2>&1
                fi
              done
              
              # Jetson ARM nodes - UNCORDON (remove taints)
              echo -e "\nUncordoning Jetson nodes..."
              for node in jetson01 jetson02; do
                if kubectl get node $node > /dev/null 2>&1; then
                  echo "Processing Jetson node $node..."
                  
                  # Remove ALL taints from Jetson nodes
                  remove_taint $node "node-type=arm:NoSchedule"
                  remove_taint $node "node-isolation=complete:NoExecute"
                  
                  # Apply architecture labels
                  apply_label $node "kubernetes.io/arch=arm64"
                  apply_label $node "node.kubernetes.io/architecture=arm64"
                  apply_label $node "hardware.tier=jetson"
                  apply_label $node "node-type=arm"
                  apply_label $node "nvidia.com/gpu=true"
                  apply_label $node "gpu.nvidia.jetson=true"
                  
                  # Remove isolation label
                  kubectl label nodes $node node-isolation- 2>/dev/null || true
                fi
              done
              
              # Show results
              echo ""
              echo "=== Node Architecture Summary ==="
              echo ""
              echo "x86_64 Nodes:"
              kubectl get nodes -l 'node.kubernetes.io/architecture=x86_64' -o custom-columns=NAME:.metadata.name,TIER:.metadata.labels.hardware\\.tier,GPU:.metadata.labels.nvidia\\.com/gpu
              echo ""
              echo "ARM64 Nodes:"
              kubectl get nodes -l 'node.kubernetes.io/architecture=arm64' -o custom-columns=NAME:.metadata.name,TIER:.metadata.labels.hardware\\.tier,TYPE:.metadata.labels.node-type
              echo ""
              echo "All Nodes with Architecture:"
              kubectl get nodes -L kubernetes.io/arch,node.kubernetes.io/architecture,hardware.tier
              
              echo ""
              echo "Taint Status:"
              kubectl get nodes -o custom-columns=NAME:.metadata.name,TAINTS:.spec.taints
              
              echo ""
              echo "=== Node labeling completed at $(date) ==="
