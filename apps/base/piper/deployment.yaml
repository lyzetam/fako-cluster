# apps/base/piper/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: piper
  namespace: piper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: piper
  template:
    metadata:
      labels:
        app: piper
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: NotIn
                values:
                - "zz-macbookpro"
              - key: node-role.kubernetes.io/control-plane
                operator: DoesNotExist
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        # Main Piper container
        - name: piper
          image: rhasspy/wyoming-piper:latest
          ports:
            - containerPort: 10200
              protocol: TCP
          args:
            - "--voice"
            - "en_US-amy-low"
            - "--uri"
            - "tcp://0.0.0.0:10200"
            - "--data-dir"
            - "/data"
            - "--download-dir"
            - "/data"
            - "--max-piper-procs"
            - "8"
            - "--debug"
          volumeMounts:
            - mountPath: /data
              name: piper-data
          resources:
            requests:
              memory: "4Gi"
              cpu: "2000m"
            limits:
              memory: "8Gi"
              cpu: "4000m"
          livenessProbe:
            tcpSocket:
              port: 10200
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            tcpSocket:
              port: 10200
            initialDelaySeconds: 10
            periodSeconds: 10
        
        # Lightweight voice manager (only downloads what's missing)
        - name: voice-manager
          image: busybox:1.37.0
          command: ["/bin/sh"]
          args:
            - -c
            - |
              echo "Voice Manager Starting..."
              
              # Simple monitoring - Piper already has the voices it needs
              while true; do
                echo "Voice manager check at $(date)"
                
                # Check if essential voice still exists
                if [ -f /data/en_US-amy-low.onnx ]; then
                  echo "✓ Essential voice present"
                else
                  echo "⚠ Essential voice missing!"
                fi
                
                # List available voices
                echo "Available voices:"
                ls -la /data/*.onnx 2>/dev/null || echo "No voices found"
                
                # Sleep for 1 hour
                sleep 3600
              done
          volumeMounts:
            - mountPath: /data
              name: piper-data
          resources:
            requests:
              memory: "32Mi"
              cpu: "10m"
            limits:
              memory: "64Mi"
              cpu: "50m"
      
      volumes:
        - name: piper-data
          persistentVolumeClaim:
            claimName: piper-data


# # apps/base/piper/deployment.yaml
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: piper
#   namespace: piper
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: piper
#   template:
#     metadata:
#       labels:
#         app: piper
#     spec:
#       initContainers:
#         # Quick check for essential voices only
#         - name: voice-check
#           image: busybox:1.36.1
#           command: ["/bin/sh"]
#           args:
#             - -c
#             - |
#               echo "Checking for essential voice models..."
              
#               # Just check if we have at least one voice
#               if [ -f /data/en_US-amy-low.onnx ] || [ -f /data/en_US-lessac-medium.onnx ]; then
#                 echo "✓ Found at least one voice model, proceeding..."
#                 exit 0
#               else
#                 echo "⚠ No voice models found, but continuing anyway..."
#                 echo "Voice manager sidecar will download them."
#                 exit 0  # Don't block startup
#               fi
#           volumeMounts:
#             - mountPath: /data
#               name: piper-data
#           resources:
#             requests:
#               cpu: 50m
#               memory: 64Mi
      
#       containers:
#         # Main Piper container
#         - name: piper
#           image: rhasspy/wyoming-piper:latest
#           ports:
#             - containerPort: 10200
#               protocol: TCP
#           args:
#             - "--voice"
#             - "en_US-amy-low"
#             - "--uri"
#             - "tcp://0.0.0.0:10200"
#             - "--data-dir"
#             - "/data"
#             - "--download-dir"
#             - "/data"
#             - "--max-piper-procs"
#             - "2"
#             - "--update-voices"  # Auto-download if needed
#             - "--debug"
#           volumeMounts:
#             - mountPath: /data
#               name: piper-data
#           resources:
#             requests:
#               memory: "2Gi"
#               cpu: "1000m"
#             limits:
#               memory: "4Gi"
#               cpu: "2000m"
#           livenessProbe:
#             tcpSocket:
#               port: 10200
#             initialDelaySeconds: 60
#             periodSeconds: 30
#           readinessProbe:
#             tcpSocket:
#               port: 10200
#             initialDelaySeconds: 30
#             periodSeconds: 10
        
#         # Voice manager sidecar
#         - name: voice-manager
#           image: ubuntu:24.04
#           command: ["/bin/bash"]
#           args:
#             - -c
#             - |
#               echo "Voice Manager Sidecar Starting..."
              
#               # Install wget
#               apt-get update -qq && apt-get install -y wget > /dev/null 2>&1
              
#               cd /data
              
#               # GitHub releases URL
#               BASE_URL="https://github.com/rhasspy/piper/releases/download/2023.11.14-2"
              
#               # Voice models to maintain
#               VOICES=(
#                 "en_US-amy-low"
#                 "en_US-lessac-medium"
#                 "en_US-ryan-high"
#                 "en_GB-alan-low"
#                 "en_US-kusal-medium"
#                 "en_US-ljspeech-high"
#               )
              
#               # Download function with retry
#               download_voice() {
#                 local voice=$1
#                 local retries=3
                
#                 for i in $(seq 1 $retries); do
#                   if [ ! -f "${voice}.onnx" ]; then
#                     echo "Downloading ${voice} (attempt $i/$retries)..."
#                     if wget -q --show-progress "${BASE_URL}/${voice}.onnx" && \
#                        wget -q --show-progress "${BASE_URL}/${voice}.onnx.json"; then
#                       echo "✓ Successfully downloaded ${voice}"
#                       return 0
#                     else
#                       echo "✗ Failed attempt $i for ${voice}"
#                       sleep $((i * 10))  # Exponential backoff
#                     fi
#                   else
#                     return 0  # Already exists
#                   fi
#                 done
#                 return 1
#               }
              
#               # Initial download pass
#               echo "=== Initial Voice Download ==="
#               for voice in "${VOICES[@]}"; do
#                 download_voice "$voice" || echo "Failed to download $voice after retries"
#               done
              
#               echo ""
#               echo "=== Available Voices ==="
#               ls -la *.onnx 2>/dev/null || echo "No voices found"
              
#               # Monitor and maintain voices
#               while true; do
#                 sleep 3600  # Check hourly
                
#                 echo ""
#                 echo "=== Voice Manager Health Check $(date) ==="
                
#                 # Check if essential voices still exist
#                 if [ ! -f "en_US-amy-low.onnx" ]; then
#                   echo "⚠ Essential voice missing! Re-downloading..."
#                   download_voice "en_US-amy-low"
#                 fi
                
#                 # Cleanup old/corrupted files
#                 find . -name "*.onnx" -size -1M -delete 2>/dev/null
#                 find . -name "*.onnx.json" -size -100c -delete 2>/dev/null
                
#                 echo "Voice manager heartbeat..."
#               done
#           volumeMounts:
#             - mountPath: /data
#               name: piper-data
#           resources:
#             requests:
#               memory: "256Mi"
#               cpu: "100m"
#             limits:
#               memory: "512Mi"
#               cpu: "200m"
      
#       volumes:
#         - name: piper-data
#           persistentVolumeClaim:
#             claimName: piper-data


# # apps/base/piper/deployment.yaml
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: piper
#   namespace: piper
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: piper
#   template:
#     metadata:
#       labels:
#         app: piper
#     spec:
#       containers:
#         - name: piper
#           image: rhasspy/wyoming-piper:latest
#           args:
#             - --voice
#             - en_US-lessac-medium
#           ports:
#             - containerPort: 10200
#               protocol: TCP
#           volumeMounts:
#             - mountPath: /data
#               name: piper-data
#           resources:
#             requests:
#               memory: "2Gi"
#               cpu: "1000m"
#             limits:
#               memory: "4Gi"
#               cpu: "2000m"
#           livenessProbe:
#             tcpSocket:
#               port: 10200
#             initialDelaySeconds: 30
#             periodSeconds: 30
#           readinessProbe:
#             tcpSocket:
#               port: 10200
#             initialDelaySeconds: 10
#             periodSeconds: 10
#       volumes:
#         - name: piper-data
#           persistentVolumeClaim:
#             claimName: piper-data
