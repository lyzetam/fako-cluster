# apps/base/piper/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: piper
  namespace: piper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: piper
  template:
    metadata:
      labels:
        app: piper
    spec:
      nodeSelector:
        kubernetes.io/hostname: aitower
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
        # Download voices using new Piper v1.3.0 utility
        - name: voice-init
          image: python:3.12-slim
          command: ["/bin/sh", "-c"]
          args:
            - |
              set -e
              echo "Installing Piper TTS v1.3.0..."
              pip install piper-tts==1.3.0
              
              echo "Downloading voice models using built-in utility..."
              cd /data
              python -m piper.download_voices --voice en_US-ryan-high
              
              echo "Voice download complete."
              ls -la /data/
          volumeMounts:
            - mountPath: /data
              name: piper-data
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
      containers:
        # Modern Piper v1.3.0 container with HTTP API
        - name: piper
          image: python:3.12-slim
          ports:
            - containerPort: 10200
              protocol: TCP
          command: ["/bin/sh", "-c"]
          args:
            - |
              set -e
              echo "Installing Piper TTS v1.3.0..."
              pip install piper-tts==1.3.0 flask>=3,<4
              
              echo "Starting Piper HTTP server..."
              cd /data
              
              cat > /tmp/server.py << 'EOF'
              from flask import Flask, request, Response
              import piper
              import io
              import wave
              import json
              import os
              
              app = Flask(__name__)
              
              # Initialize Piper voice
              voice_path = "/data/en_US-ryan-high.onnx"
              voice = piper.PiperVoice.load(voice_path)
              
              @app.route('/api/tts', methods=['POST'])
              def synthesize():
                  try:
                      data = request.get_json()
                      text = data.get('text', '')
                      
                      if not text:
                          return {'error': 'No text provided'}, 400
                      
                      # Synthesize audio
                      audio_chunks = []
                      synthesis_config = piper.PiperConfig(
                          length_scale=1.0,
                          noise_scale=0.667,
                          noise_w=0.8
                      )
                      
                      for chunk in voice.synthesize(text, synthesis_config):
                          audio_chunks.append(chunk.audio)
                      
                      # Combine chunks
                      audio_data = b''.join(audio_chunks)
                      
                      # Create WAV response
                      wav_buffer = io.BytesIO()
                      with wave.open(wav_buffer, 'wb') as wav_file:
                          wav_file.setnchannels(1)  # Mono
                          wav_file.setsampwidth(2)  # 16-bit
                          wav_file.setframerate(voice.config.sample_rate)
                          wav_file.writeframes(audio_data)
                      
                      wav_buffer.seek(0)
                      return Response(
                          wav_buffer.getvalue(),
                          mimetype='audio/wav',
                          headers={'Content-Disposition': 'attachment; filename=speech.wav'}
                      )
                  
                  except Exception as e:
                      return {'error': str(e)}, 500
              
              @app.route('/api/health', methods=['GET'])
              def health():
                  return {'status': 'healthy', 'voice': 'en_US-ryan-high'}
              
              if __name__ == '__main__':
                  app.run(host='0.0.0.0', port=10200, debug=True)
              EOF
              
              python /tmp/server.py
          env:
            - name: OMP_NUM_THREADS
              value: "1"
          volumeMounts:
            - mountPath: /data
              name: piper-data
          resources:
            requests:
              memory: "2Gi"
              cpu: "1000m"
            limits:
              memory: "3Gi"
              cpu: "1500m"
          livenessProbe:
            httpGet:
              path: /api/health
              port: 10200
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 10200
            initialDelaySeconds: 10
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: /api/health
              port: 10200
            initialDelaySeconds: 120
            periodSeconds: 10
            failureThreshold: 30
        
        # Lightweight voice manager (only downloads what's missing)
        - name: voice-manager
          image: busybox:1.37.0
          command: ["/bin/sh"]
          args:
            - -c
            - |
              echo "Voice Manager Starting..."
              
              # Simple monitoring - Piper already has the voices it needs
              while true; do
                echo "Voice manager check at $(date)"
                
                # Check if essential voice still exists
                if [ -f /data/en_US-ryan-high.onnx ]; then
                  echo "✓ Essential voice present (ryan-high)"
                else
                  echo "⚠ Essential voice missing (ryan-high)!"
                fi
                
                # List available voices
                echo "Available voices:"
                ls -la /data/*.onnx 2>/dev/null || echo "No voices found"
                
                # Sleep for 1 hour
                sleep 3600
              done
          volumeMounts:
            - mountPath: /data
              name: piper-data
          resources:
            requests:
              memory: "32Mi"
              cpu: "10m"
            limits:
              memory: "64Mi"
              cpu: "50m"
      
      volumes:
        - name: piper-data
          persistentVolumeClaim:
            claimName: piper-data
