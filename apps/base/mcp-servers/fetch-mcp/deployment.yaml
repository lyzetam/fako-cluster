apiVersion: apps/v1
kind: Deployment
metadata:
  name: fetch-mcp-server
  namespace: mcp-servers
  labels:
    app.kubernetes.io/name: fetch-mcp-server
    app.kubernetes.io/component: mcp-server
    app.kubernetes.io/part-of: mcp-servers
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: fetch-mcp-server
      app.kubernetes.io/component: mcp-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fetch-mcp-server
        app.kubernetes.io/component: mcp-server
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        # Additional security hardening
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: []
      containers:
        - name: fetch-mcp-server
          image: node:22-alpine
          # Install and run the fetch MCP server with HTTP transport
          command: ["/bin/sh"]
          args: 
            - "-c"
            - |
              echo 'Starting fetch MCP server setup...'
              echo 'Installing @modelcontextprotocol/server-fetch...'
              npm install -g @modelcontextprotocol/server-fetch
              echo 'Starting HTTP server on port 3000...'
              # Create readiness file for health checks
              echo 'ready' > /tmp/mcp-server-ready || echo 'Cannot create readiness file'
              # Start the MCP server with HTTP transport
              exec mcp-server-fetch --transport http --port 3000
          ports:
            - containerPort: 3000
              protocol: TCP
          env:
            - name: PORT
              value: "3000"
            - name: NODE_ENV
              value: "production"
            - name: MCP_SERVER_NAME
              value: "fetch"
            # Security configurations
            - name: FETCH_MAX_LENGTH
              value: "5000"
            - name: FETCH_TIMEOUT
              value: "30000"
            - name: FETCH_USER_AGENT
              value: "ModelContextProtocol/1.0 (Kubernetes; +https://github.com/modelcontextprotocol/servers)"
            # Network restrictions - respect robots.txt by default
            - name: FETCH_RESPECT_ROBOTS
              value: "true"
            # Rate limiting
            - name: FETCH_RATE_LIMIT
              value: "10"
            - name: FETCH_RATE_WINDOW
              value: "60000"
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - name: fetch-cache
              mountPath: /app/cache
          # Health checks - use simple file-based approach since ps/grep not available in minimal image
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "test -f /tmp/mcp-server-ready"
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "test -f /tmp/mcp-server-ready"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
      volumes:
        - name: fetch-cache
          persistentVolumeClaim:
            claimName: fetch-cache
      # Pod-level security constraints
      hostNetwork: false
      hostPID: false
      hostIPC: false
      # Prevent access to host filesystem
      automountServiceAccountToken: false
