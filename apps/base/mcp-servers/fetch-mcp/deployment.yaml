apiVersion: apps/v1
kind: Deployment
metadata:
  name: fetch-mcp-server
  namespace: mcp-servers
  labels:
    app.kubernetes.io/name: fetch-mcp-server
    app.kubernetes.io/component: mcp-server
    app.kubernetes.io/part-of: mcp-servers
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: fetch-mcp-server
      app.kubernetes.io/component: mcp-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fetch-mcp-server
        app.kubernetes.io/component: mcp-server
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        # Additional security hardening
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: []
      containers:
        - name: fetch-mcp-server
          image: python:3.13-alpine
          # Install and run the fetch MCP server with HTTP transport wrapper
          command: ["/bin/sh"]
          args: 
            - "-c"
            - |
              echo 'Starting fetch MCP server setup...'
              # Use /tmp for writable directory
              export HOME=/tmp
              export PATH="/tmp/.local/bin:$PATH"
              # Install pip packages
              pip install --user --no-cache-dir mcp-server-fetch mcp
              # Create a simple HTTP-to-stdio bridge for the MCP server
              cat > /tmp/mcp_http_bridge.py << 'EOF'
              import asyncio
              import json
              import subprocess
              import sys
              from http.server import HTTPServer, BaseHTTPRequestHandler
              import threading
              
              class MCPBridgeHandler(BaseHTTPRequestHandler):
                  def do_POST(self):
                      # Handle both root and /mcp paths
                      if self.path not in ['/', '/mcp']:
                          self.send_response(404)
                          self.end_headers()
                          return
                          
                      content_length = int(self.headers['Content-Length'])
                      post_data = self.rfile.read(content_length)
                      
                      # Run the MCP server as a subprocess
                      proc = subprocess.Popen(
                          [sys.executable, '-m', 'mcp_server_fetch'],
                          stdin=subprocess.PIPE,
                          stdout=subprocess.PIPE,
                          stderr=subprocess.PIPE
                      )
                      
                      # Send the request and get response
                      stdout, stderr = proc.communicate(input=post_data)
                      
                      # Send response
                      self.send_response(200)
                      self.send_header('Content-Type', 'application/json')
                      self.end_headers()
                      self.wfile.write(stdout)
                  
                  def do_GET(self):
                      if self.path == '/health':
                          self.send_response(200)
                          self.send_header('Content-Type', 'text/plain')
                          self.end_headers()
                          self.wfile.write(b'OK')
                      else:
                          self.send_response(404)
                          self.end_headers()
              
              if __name__ == '__main__':
                  server = HTTPServer(('0.0.0.0', 3000), MCPBridgeHandler)
                  print('MCP HTTP Bridge listening on port 3000...')
                  server.serve_forever()
              EOF
              # Create readiness file for health checks
              echo 'ready' > /tmp/mcp-server-ready || echo 'Cannot create readiness file'
              echo 'Starting MCP HTTP bridge on port 3000...'
              # Start the HTTP bridge
              exec python /tmp/mcp_http_bridge.py
          ports:
            - containerPort: 3000
              protocol: TCP
          env:
            - name: PORT
              value: "3000"
            - name: MCP_SERVER_NAME
              value: "fetch"
            # Python environment
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: PYTHONDONTWRITEBYTECODE
              value: "1"
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - name: fetch-cache
              mountPath: /app/cache
            - name: tmp-volume
              mountPath: /tmp
          # Health checks - use simple file-based approach since ps/grep not available in minimal image
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "test -f /tmp/mcp-server-ready"
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "test -f /tmp/mcp-server-ready"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
      volumes:
        - name: fetch-cache
          persistentVolumeClaim:
            claimName: fetch-cache
        - name: tmp-volume
          emptyDir: {}
      # Pod-level security constraints
      hostNetwork: false
      hostPID: false
      hostIPC: false
      # Prevent access to host filesystem
      automountServiceAccountToken: false
