# apps/base/mcp-servers/filesystem-mcp/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: filesystem-mcp-server
  namespace: mcp-servers
  labels:
    app.kubernetes.io/name: filesystem-mcp-server
    app.kubernetes.io/component: mcp-server
    app.kubernetes.io/part-of: mcp-servers
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: filesystem-mcp-server
      app.kubernetes.io/component: mcp-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: filesystem-mcp-server
        app.kubernetes.io/component: mcp-server
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: filesystem-mcp-server
          image: ghcr.io/astral-sh/uv:python3.12-bookworm-slim
          # Install and run the official filesystem MCP server with HTTP transport
          command: ["/bin/sh"]
          args: 
            - "-c"
            - |
              echo 'Starting filesystem MCP server setup...'
              echo 'Installing @modelcontextprotocol/server-filesystem...'
              /usr/local/bin/uv tool install @modelcontextprotocol/server-filesystem || echo 'uv tool install failed'
              echo 'Starting HTTP server on port 3000...'
              # Create readiness file for health checks
              echo 'ready' > /tmp/mcp-server-ready || echo 'Cannot create readiness file'
              # Start the MCP server with HTTP transport pointing to the mounted directories
              exec /app/cache/.uv/bin/mcp-server-filesystem --transport http --port 3000 /data /logs /config
          ports:
            - containerPort: 3000
              protocol: TCP
          env:
            - name: PORT
              value: "3000"
            - name: NODE_ENV
              value: "production"
            - name: MCP_SERVER_NAME
              value: "filesystem"
            # Fix uv directory permissions - redirect all uv paths to writable locations
            - name: UV_CACHE_DIR
              value: "/app/cache/.uv"
            - name: UV_TOOL_DIR
              value: "/app/cache/.uv/tools"
            - name: UV_TOOL_BIN_DIR
              value: "/app/cache/.uv/bin"
            - name: UV_PYTHON_INSTALL_DIR
              value: "/app/cache/.uv/python"
            - name: XDG_DATA_HOME
              value: "/app/cache/.local/share"
            - name: XDG_CACHE_HOME
              value: "/app/cache/.cache"
            - name: PATH
              value: "/app/cache/.uv/bin:$PATH"
          volumeMounts:
            - name: filesystem-cache
              mountPath: /app/cache
            - mountPath: /data
              name: shared-data
            - mountPath: /logs
              name: log-storage
            - mountPath: /config
              name: config-storage
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            capabilities:
              drop:
                - ALL
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          # Health checks - use simple file-based approach since ps/grep not available in minimal image
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "test -f /tmp/mcp-server-ready"
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "test -f /tmp/mcp-server-ready"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
      volumes:
        - name: filesystem-cache
          persistentVolumeClaim:
            claimName: filesystem-cache
        - name: shared-data
          persistentVolumeClaim:
            claimName: filesystem-mcp-data
        - name: log-storage
          persistentVolumeClaim:
            claimName: filesystem-mcp-logs
        - name: config-storage
          persistentVolumeClaim:
            claimName: filesystem-mcp-config
