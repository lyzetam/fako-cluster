# apps/base/mcp-servers/filesystem-mcp/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: filesystem-mcp-server
  namespace: mcp-servers
  labels:
    app.kubernetes.io/name: filesystem-mcp-server
    app.kubernetes.io/component: mcp-server
    app.kubernetes.io/part-of: mcp-servers
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: filesystem-mcp-server
      app.kubernetes.io/component: mcp-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: filesystem-mcp-server
        app.kubernetes.io/component: mcp-server
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        # Official MCP filesystem server - running as persistent process
        - name: mcp-filesystem-server
          image: mcp/filesystem
          command: ["/bin/sh", "-c"]
          args: 
            - |
              echo "Starting MCP filesystem server..."
              echo "Available directories: /data /logs /config /workspace"
              ls -la /data /logs /config /workspace 2>/dev/null || true
              
              # Create a named pipe to keep stdin open for the MCP server
              mkfifo /tmp/mcp_stdin
              
              # Keep feeding empty lines to stdin to prevent the MCP server from exiting
              (while true; do echo ""; sleep 60; done) > /tmp/mcp_stdin &
              STDIN_PID=$!
              
              echo "Starting MCP server with persistent stdin..."
              # Start the MCP server with the named pipe as stdin
              node /app/dist/index.js /data /logs /config /workspace < /tmp/mcp_stdin &
              MCP_PID=$!
              
              echo "MCP server started with PID: $MCP_PID (stdin feeder: $STDIN_PID)"
              
              # Function to cleanup on exit
              cleanup() {
                echo "Cleaning up processes..."
                kill $STDIN_PID 2>/dev/null || true
                kill $MCP_PID 2>/dev/null || true
                rm -f /tmp/mcp_stdin
                exit 0
              }
              
              # Set up signal handlers
              trap cleanup SIGTERM SIGINT
              
              # Keep container alive and monitor the MCP process
              while kill -0 $MCP_PID 2>/dev/null; do
                sleep 30
                # Check if stdin feeder is still running, restart if needed
                if ! kill -0 $STDIN_PID 2>/dev/null; then
                  echo "Restarting stdin feeder..."
                  (while true; do echo ""; sleep 60; done) > /tmp/mcp_stdin &
                  STDIN_PID=$!
                fi
              done
              
              echo "MCP server process ended"
              cleanup
          volumeMounts:
            - mountPath: /data
              name: shared-data
            - mountPath: /logs
              name: log-storage
            - mountPath: /config
              name: config-storage
            - mountPath: /workspace
              name: shared-workspace
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            capabilities:
              drop:
                - ALL
          resources:
            requests:
              memory: "128Mi"
              cpu: "50m"
            limits:
              memory: "512Mi"
              cpu: "200m"
          # Health check based on process existence
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "ps aux | grep -v grep | grep -q 'node.*index.js'"
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c 
                - "ps aux | grep -v grep | grep -q 'node.*index.js'"
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
      volumes:
        - name: filesystem-cache
          persistentVolumeClaim:
            claimName: filesystem-cache
        - name: shared-data
          persistentVolumeClaim:
            claimName: filesystem-mcp-data
        - name: log-storage
          persistentVolumeClaim:
            claimName: filesystem-mcp-logs
        - name: config-storage
          persistentVolumeClaim:
            claimName: filesystem-mcp-config
        - name: shared-workspace
          persistentVolumeClaim:
            claimName: mcp-shared-workspace
