apiVersion: apps/v1
kind: Deployment
metadata:
  name: github-mcp-server
  namespace: mcp-servers
  labels:
    app.kubernetes.io/name: github-mcp-server
    app.kubernetes.io/component: mcp-server
    app.kubernetes.io/part-of: mcp-servers
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: github-mcp-server
      app.kubernetes.io/component: mcp-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: github-mcp-server
        app.kubernetes.io/component: mcp-server
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
        - name: npm-install
          image: node:22-alpine
          command: ["/bin/sh"]
          args: ["-c", "cd /app && npm init -y && npm install @modelcontextprotocol/server-github"]
          volumeMounts:
            - name: app-volume
              mountPath: /app
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
      containers:
        - name: github-mcp-server
          image: node:22-alpine
          # GitHub MCP server is stdio-based, so we use a placeholder container
          # The actual MCP server can be accessed via kubectl exec for stdio communication
          command: ["/bin/sh"]
          args: ["-c", "cd /app && ls -la && while true; do sleep 3600; done"]
          volumeMounts:
            - name: app-volume
              mountPath: /app
          env:
            - name: GITHUB_PERSONAL_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: github-mcp-secret
                  key: token
            - name: GITHUB_TOOLSETS
              value: "repos,issues,pull_requests,actions,code_security,experiments"
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      volumes:
        - name: app-volume
          emptyDir: {}
