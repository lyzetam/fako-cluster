# Alternative minimal configuration without traces
# Use this if you don't have Tempo deployed yet
apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: alloy
data:
  config.alloy: |
    // ============================================
    // Logging configuration
    // ============================================
    logging {
      level = "info"
      format = "logfmt"
    }
    
    // ============================================
    // Kubernetes Pod Logs Collection
    // ============================================
    
    discovery.kubernetes "pods" {
      role = "pod"
    }
    
    discovery.relabel "pod_logs" {
      targets = discovery.kubernetes.pods.targets
      
      // Only keep running pods
      rule {
        source_labels = ["__meta_kubernetes_pod_phase"]
        regex = "Running"
        action = "keep"
      }
      
      // Set namespace label
      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        action = "replace"
        target_label = "namespace"
      }
      
      // Set pod name
      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        action = "replace"
        target_label = "pod"
      }
      
      // Set container name
      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        action = "replace"
        target_label = "container"
      }
      
      // Set app label
      rule {
        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
        action = "replace"
        target_label = "app"
      }
      
      rule {
        source_labels = ["__meta_kubernetes_pod_label_app"]
        regex = "(.+)"
        action = "replace"
        target_label = "app"
      }
      
      // Set node name
      rule {
        source_labels = ["__meta_kubernetes_pod_node_name"]
        action = "replace"
        target_label = "node"
      }
      
      // Set job label
      rule {
        source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
        action = "replace"
        target_label = "job"
        separator = "/"
        replacement = "$1"
      }
    }
    
    // Kubernetes log source
    loki.source.kubernetes "pods" {
      targets = discovery.relabel.pod_logs.output
      forward_to = [loki.process.pod_logs.receiver]
    }
    
    // Simple log processing
    loki.process "pod_logs" {
      forward_to = [loki.write.default.receiver]
      
      stage.cri {}
      
      stage.static_labels {
        values = {
          cluster = "production",
        }
      }
    }
    
    // ============================================
    // System Logs Collection  
    // ============================================
    
    local.file_match "system_logs" {
      path_targets = [
        {__path__ = "/var/log/syslog", job = "syslog"},
        {__path__ = "/var/log/messages", job = "messages"},
      ]
    }
    
    loki.source.file "system" {
      targets = local.file_match.system_logs.targets
      forward_to = [loki.write.default.receiver]
      tail_from_end = false
    }
    
    // ============================================
    // Loki Write Configuration
    // ============================================
    
    loki.write "default" {
      endpoint {
        url = "http://loki-gateway.loki-stack.svc.cluster.local/loki/api/v1/push"
      }
      
      external_labels = {
        cluster = "production",
      }
    }
    
    // ============================================
    // Metrics Collection
    // ============================================
    
    // Node metrics
    prometheus.exporter.unix "node_metrics" {
      set_collectors = ["cpu", "meminfo", "filesystem", "netdev", "diskstats", "loadavg"]
      disable_collectors = ["wifi", "thermal"]
      
      filesystem {
        fs_types_exclude = "^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$"
        mount_points_exclude = "^/(dev|proc|sys|var/lib/docker/.+)($|/)"
      }
    }
    
    prometheus.scrape "node_exporter" {
      targets = prometheus.exporter.unix.node_metrics.targets
      forward_to = [prometheus.remote_write.default.receiver]
      scrape_interval = "15s"
    }
    
    // ServiceMonitor discovery
    prometheus.operator.servicemonitors "service_monitors" {
      forward_to = [prometheus.remote_write.default.receiver]
      namespaces = ["gpu-monitoring", "monitoring", "gpu-operator", "default", "alloy", "loki-stack", "kube-system"]
    }
    
    // Remote write to Prometheus
    prometheus.remote_write "default" {
      endpoint {
        url = "http://prometheus-kube-prometheus-prometheus.monitoring.svc.cluster.local:9090/api/v1/write"
      }
      
      external_labels = {
        cluster = "production",
      }
    }
    
    // ============================================
    // Self-monitoring
    // ============================================
    
    prometheus.exporter.self "alloy" {}
    
    prometheus.scrape "self" {
      targets = prometheus.exporter.self.alloy.targets
      forward_to = [prometheus.remote_write.default.receiver]
      scrape_interval = "30s"
      job_name = "alloy"
    }