# Comprehensive Alloy configuration with traces, logs, and voice pipeline monitoring
apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: alloy
data:
  config.alloy: |
    // ============================================
    // Logging configuration
    // ============================================
    logging {
      level = "info"
      format = "logfmt"
    }
    
    // ============================================
    // Kubernetes Pod Logs Collection
    // ============================================
    
    discovery.kubernetes "pods" {
      role = "pod"
    }
    
    discovery.relabel "pod_logs" {
      targets = discovery.kubernetes.pods.targets
      
      rule {
        source_labels = ["__meta_kubernetes_pod_phase"]
        regex = "Running"
        action = "keep"
      }
      
      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        action = "replace"
        target_label = "namespace"
      }
      
      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        action = "replace"
        target_label = "pod"
      }
      
      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        action = "replace"
        target_label = "container"
      }
      
      // Add service label from pod labels
      rule {
        source_labels = ["__meta_kubernetes_pod_label_app"]
        action = "replace"
        target_label = "service"
      }
      
      // Add app name from annotations
      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_app_kubernetes_io_name"]
        action = "replace"
        target_label = "app"
      }
    }
    
    loki.source.kubernetes "pods" {
      targets = discovery.relabel.pod_logs.output
      forward_to = [loki.process.pods.receiver]
    }
    
    loki.process "pods" {
      forward_to = [loki.write.default.receiver]
      
      stage.cri {}
      
      stage.static_labels {
        values = {
          cluster = "production",
        }
      }
    }
    
    // ============================================
    // Loki Write
    // ============================================
    
    loki.write "default" {
      endpoint {
        url = "http://loki-gateway.loki-stack.svc.cluster.local/loki/api/v1/push"
      }
      
      external_labels = {
        cluster = "production",
      }
    }
    
    // ============================================
    // OpenTelemetry Traces Pipeline  
    // ============================================
    
    // OTLP Receiver - accepts traces from applications
    otelcol.receiver.otlp "traces" {
      grpc {
        endpoint = "0.0.0.0:4317"
      }
      
      http {
        endpoint = "0.0.0.0:4318"
      }
      
      output {
        traces = [otelcol.processor.batch.traces.input]
      }
    }
    
    // Batch processor - improves performance by batching traces
    otelcol.processor.batch "traces" {
      output {
        traces = [otelcol.exporter.otlp.tempo.input]
      }
    }
    
    // OTLP Exporter - sends traces to Tempo
    otelcol.exporter.otlp "tempo" {
      client {
        endpoint = "http://tempo.tempo.svc.cluster.local:4317"
        tls {
          insecure = true
        }
      }
    }
    
    // ============================================
    // Voice Pipeline Logs Collection
    // ============================================
    
    // Specific discovery for voice pipeline logs with proper labeling
    discovery.kubernetes "voice_pipeline_logs" {
      role = "pod"
      namespaces {
        names = ["whisper", "ollama", "piper", "openwakeword", "voice-pipeline-test"]
      }
    }
    
    discovery.relabel "voice_pipeline_pod_logs" {
      targets = discovery.kubernetes.voice_pipeline_logs.targets
      
      rule {
        source_labels = ["__meta_kubernetes_pod_phase"]
        regex = "Running"
        action = "keep"
      }
      
      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        action = "replace"
        target_label = "namespace"
      }
      
      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        action = "replace"
        target_label = "pod"
      }
      
      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        action = "replace"
        target_label = "container"
      }
      
      rule {
        source_labels = ["__meta_kubernetes_pod_label_app"]
        action = "replace"
        target_label = "service"
      }
    }
    
    // Separate log source for voice pipeline with better processing
    loki.source.kubernetes "voice_pipeline" {
      targets = discovery.relabel.voice_pipeline_pod_logs.output
      forward_to = [loki.process.voice_pipeline.receiver]
    }
    
    loki.process "voice_pipeline" {
      forward_to = [loki.write.default.receiver]
      
      stage.cri {}
      
      // Filter out binary/garbled content
      stage.regex {
        expression = "^[\\x20-\\x7E\\s]+$"
      }
      
      stage.static_labels {
        values = {
          cluster = "production",
          pipeline = "voice",
        }
      }
    }
    
    // ============================================
    // Metrics Collection - Enhanced Service Discovery
    // ============================================
    
    // Node metrics
    prometheus.exporter.unix "node_metrics" {
      set_collectors = ["cpu", "meminfo", "filesystem", "netdev", "diskstats", "loadavg"]
    }
    
    prometheus.scrape "node_exporter" {
      targets = prometheus.exporter.unix.node_metrics.targets
      forward_to = [prometheus.remote_write.default.receiver]
      scrape_interval = "15s"
    }
    
    // Discover services with Prometheus annotations
    discovery.kubernetes "services" {
      role = "service"
    }
    
    discovery.relabel "metrics_services" {
      targets = discovery.kubernetes.services.targets
      
      // Keep services with prometheus.io/scrape annotation
      rule {
        source_labels = ["__meta_kubernetes_service_annotation_prometheus_io_scrape"]
        regex = "true"
        action = "keep"
      }
      
      // Set metrics path
      rule {
        source_labels = ["__meta_kubernetes_service_annotation_prometheus_io_path"]
        action = "replace"
        target_label = "__metrics_path__"
        regex = "(.+)"
      }
      
      // Set address with port
      rule {
        source_labels = ["__address__", "__meta_kubernetes_service_annotation_prometheus_io_port"]
        action = "replace"
        target_label = "__address__"
        regex = "([^:]+)(?::\\d+)?;(\\d+)"
        replacement = "$1:$2"
      }
      
      // Add labels
      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        target_label = "namespace"
      }
      
      rule {
        source_labels = ["__meta_kubernetes_service_name"]
        target_label = "service"
      }
    }
    
    prometheus.scrape "services" {
      targets = discovery.relabel.metrics_services.output
      forward_to = [prometheus.remote_write.default.receiver]
      scrape_interval = "30s"
    }
    
    // GPU Exporter - Direct Configuration
    prometheus.scrape "gpu_exporter" {
      targets = [
        {"__address__" = "nvidia-gpu-exporter.gpu-monitoring.svc.cluster.local:9835"},
      ]
      forward_to = [prometheus.remote_write.default.receiver]
      scrape_interval = "30s"
      metrics_path = "/metrics"
    }
    
    // ============================================
    // Metrics Remote Write
    // ============================================
    
    prometheus.remote_write "default" {
      endpoint {
        url = "http://kube-prometheus-stack-prometheus.monitoring.svc.cluster.local:9090/api/v1/write"
      }
      
      external_labels = {
        cluster = "production",
        subsystem = "voice_pipeline",
      }
    }
    
    // Self monitoring
    prometheus.exporter.self "alloy" {}
    
    prometheus.scrape "alloy_self" {
      targets = prometheus.exporter.self.alloy.targets
      forward_to = [prometheus.remote_write.default.receiver]
      job_name = "alloy"
      scrape_interval = "30s"
    }
