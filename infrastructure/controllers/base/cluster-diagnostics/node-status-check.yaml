# infrastructure/controllers/base/cluster-diagnostics/node-status-check.yaml
# Comprehensive node and cluster health check job

apiVersion: v1
kind: ServiceAccount
metadata:
  name: node-status-checker
  namespace: cluster-diagnostics
  labels:
    app.kubernetes.io/name: node-status-checker
    app.kubernetes.io/part-of: cluster-diagnostics
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: node-status-checker
  labels:
    app.kubernetes.io/name: node-status-checker
    app.kubernetes.io/part-of: cluster-diagnostics
rules:
- apiGroups: [""]
  resources: ["nodes", "pods", "services", "endpoints", "persistentvolumeclaims", "persistentvolumes", "events", "namespaces"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["nodes/status", "nodes/metrics", "nodes/proxy"]
  verbs: ["get"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets", "replicasets", "statefulsets"]
  verbs: ["get", "list"]
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["get", "list"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses", "csinodes", "csidrivers"]
  verbs: ["get", "list"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["nodes", "pods"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: node-status-checker
  labels:
    app.kubernetes.io/name: node-status-checker
    app.kubernetes.io/part-of: cluster-diagnostics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: node-status-checker
subjects:
- kind: ServiceAccount
  name: node-status-checker
  namespace: cluster-diagnostics
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: node-status-scripts
  namespace: cluster-diagnostics
  labels:
    app.kubernetes.io/name: node-status-checker
    app.kubernetes.io/part-of: cluster-diagnostics
data:
  check-nodes.sh: |
    #!/bin/bash
    set -e
    
    # Colors for output
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    NC='\033[0m'
    
    echo "=============================================="
    echo "     Kubernetes Cluster Status Report"
    echo "=============================================="
    echo "Generated at: $(date)"
    echo ""
    
    # Section 1: Node Overview
    echo "1. NODE OVERVIEW"
    echo "================"
    kubectl get nodes -o wide
    echo ""
    
    # Section 2: Node Health Details
    echo "2. NODE HEALTH DETAILS"
    echo "======================"
    
    nodes=$(kubectl get nodes -o name | cut -d'/' -f2)
    
    for node in $nodes; do
      echo -e "${YELLOW}Node: $node${NC}"
      
      # Get node ready status
      ready=$(kubectl get node $node -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
      if [ "$ready" == "True" ]; then
        echo -e "  Status: ${GREEN}Ready${NC}"
      else
        echo -e "  Status: ${RED}NotReady${NC}"
      fi
      
      # Show key resources
      echo "  Resources:"
      kubectl describe node $node | grep -A 5 "Allocatable:" | grep -E "(cpu|memory|nvidia)" || true
      
      # Check for GPU
      if kubectl get node $node -o json | jq -e '.status.capacity."nvidia.com/gpu"' > /dev/null 2>&1; then
        gpu_count=$(kubectl get node $node -o jsonpath='{.status.capacity.nvidia\.com/gpu}')
        echo -e "  GPU: ${GREEN}$gpu_count NVIDIA GPU(s)${NC}"
      fi
      
      echo ""
    done
    
    # Section 3: System Pods
    echo "3. SYSTEM PODS STATUS"
    echo "===================="
    
    # Check kube-system namespace
    total=$(kubectl get pods -n kube-system --no-headers 2>/dev/null | wc -l)
    running=$(kubectl get pods -n kube-system --field-selector=status.phase=Running --no-headers 2>/dev/null | wc -l)
    
    if [ "$total" -eq "$running" ] && [ "$total" -gt 0 ]; then
      echo -e "kube-system: ${GREEN}All pods running ($running/$total)${NC}"
    else
      echo -e "kube-system: ${RED}Issues detected ($running/$total running)${NC}"
      kubectl get pods -n kube-system --field-selector=status.phase!=Running 2>/dev/null || true
    fi
    echo ""
    
    # Section 4: Storage
    echo "4. STORAGE STATUS"
    echo "================="
    
    echo "Storage Classes:"
    kubectl get storageclass || echo "No storage classes found"
    echo ""
    
    echo "PVCs with issues:"
    kubectl get pvc --all-namespaces | grep -v Bound | grep -v NAME || echo "All PVCs are bound"
    echo ""
    
    # Section 5: GPU Infrastructure
    echo "5. GPU INFRASTRUCTURE"
    echo "===================="
    
    gpu_nodes=$(kubectl get nodes -l nvidia.com/gpu=true --no-headers 2>/dev/null | wc -l)
    echo "GPU Nodes: $gpu_nodes"
    
    if [ "$gpu_nodes" -gt 0 ]; then
      kubectl get nodes -l nvidia.com/gpu=true
      
      # Check NVIDIA device plugin
      echo ""
      echo "NVIDIA Device Plugin:"
      kubectl get pods -n nvidia-device-plugin 2>/dev/null || echo "Namespace not found"
    fi
    echo ""
    
    # Section 6: Recent Events
    echo "6. RECENT WARNING EVENTS"
    echo "========================"
    kubectl get events --all-namespaces --field-selector type=Warning --sort-by='.lastTimestamp' | tail -10 || echo "No warning events"
    echo ""
    
    # Summary
    echo "=============================================="
    not_ready=$(kubectl get nodes | grep -c NotReady || true)
    if [ "$not_ready" -eq 0 ]; then
      echo -e "${GREEN}✓ All nodes are ready${NC}"
    else
      echo -e "${RED}✗ $not_ready node(s) not ready${NC}"
    fi
    echo "=============================================="
---
apiVersion: batch/v1
kind: Job
metadata:
  name: node-status-check
  namespace: cluster-diagnostics
  labels:
    app.kubernetes.io/name: node-status-checker
    app.kubernetes.io/part-of: cluster-diagnostics
spec:
  ttlSecondsAfterFinished: 600
  backoffLimit: 0
  
  template:
    metadata:
      labels:
        app.kubernetes.io/name: node-status-checker
        app.kubernetes.io/part-of: cluster-diagnostics
    spec:
      serviceAccountName: node-status-checker
      restartPolicy: Never
      
      containers:
      - name: checker
        image: bitnami/kubectl:1.29
        imagePullPolicy: IfNotPresent
        
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
            
        command: ["/bin/bash", "/scripts/check-nodes.sh"]
        
        volumeMounts:
        - name: scripts
          mountPath: /scripts
          readOnly: true
          
      volumes:
      - name: scripts
        configMap:
          name: node-status-scripts
          defaultMode: 0755