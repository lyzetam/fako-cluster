# infrastructure/controllers/base/nvidia-toolkit-fixed/nvidia-toolkit-k3s-installer.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: nvidia-toolkit-installer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nvidia-toolkit-installer-script
  namespace: nvidia-toolkit-installer
data:
  install.sh: |
    #!/bin/bash
    set -e
    
    echo "=== NVIDIA Container Toolkit Installation for K3s ==="
    echo "Date: $(date)"
    echo "Hostname: $(hostname)"
    
    # Check if already installed
    if [ -f /host/usr/bin/nvidia-ctk ] && /host/usr/bin/nvidia-ctk --version >/dev/null 2>&1; then
        echo "NVIDIA Container Toolkit already installed on host"
        echo "Version: $(/host/usr/bin/nvidia-ctk --version)"
        echo "Keeping container alive..."
        sleep infinity
        exit 0
    fi
    
    # Install dependencies
    apt-get update
    apt-get install -y curl gnupg2 software-properties-common
    
    # Remove any broken repository files
    rm -f /etc/apt/sources.list.d/nvidia-container-toolkit.list
    rm -f /etc/apt/sources.list.d/libnvidia-container.list
    
    # Use the official NVIDIA installation method
    curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | \
        gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
    
    curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \
        sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
        tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
    
    # Update and install
    apt-get update
    apt-get install -y nvidia-container-toolkit
    
    # Copy binaries to host
    echo "Copying NVIDIA toolkit binaries to host..."
    mkdir -p /host/usr/bin
    cp -f /usr/bin/nvidia-ctk /host/usr/bin/
    cp -f /usr/bin/nvidia-container-* /host/usr/bin/
    
    # Copy libraries to host
    mkdir -p /host/usr/lib/x86_64-linux-gnu
    cp -rf /usr/lib/x86_64-linux-gnu/libnvidia-container* /host/usr/lib/x86_64-linux-gnu/ || true
    
    # Configure K3s containerd
    echo "Configuring K3s containerd..."
    
    # K3s stores its containerd config in /var/lib/rancher/k3s/agent/etc/containerd/config.toml
    K3S_CONFIG="/host/var/lib/rancher/k3s/agent/etc/containerd/config.toml"
    K3S_CONFIG_TMPL="/host/var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl"
    
    # Generate NVIDIA runtime configuration
    cat > /tmp/nvidia-container-runtime.toml <<EOF
    [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.nvidia]
      runtime_type = "io.containerd.runc.v2"
      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.nvidia.options]
        BinaryName = "/usr/bin/nvidia-container-runtime"
    
    [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.nvidia-experimental]
      runtime_type = "io.containerd.runc.v2"
      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.nvidia-experimental.options]
        BinaryName = "/usr/bin/nvidia-container-runtime-experimental"
    EOF
    
    # Create nvidia-container-runtime wrapper
    cat > /host/usr/bin/nvidia-container-runtime <<'EOF'
    #!/bin/bash
    /usr/bin/nvidia-container-runtime.experimental "$@"
    EOF
    chmod +x /host/usr/bin/nvidia-container-runtime
    
    # Copy the nvidia-container-runtime binaries
    cp -f /usr/bin/nvidia-container-runtime* /host/usr/bin/
    
    echo ""
    echo "=== Installation Complete ==="
    echo "NVIDIA Container Toolkit has been installed."
    echo ""
    echo "IMPORTANT: Manual steps required on the host:"
    echo "1. Add the following to /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl:"
    echo ""
    cat /tmp/nvidia-container-runtime.toml
    echo ""
    echo "2. Restart K3s:"
    echo "   sudo systemctl restart k3s-agent"
    echo ""
    echo "3. Verify with:"
    echo "   sudo k3s crictl info | grep -i nvidia"
    
    # Create a flag file
    touch /host/tmp/nvidia-toolkit-installed
    
    echo "Keeping container alive for debugging..."
    sleep infinity
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nvidia-toolkit-installer
  namespace: nvidia-toolkit-installer
spec:
  selector:
    matchLabels:
      name: nvidia-toolkit-installer
  template:
    metadata:
      labels:
        name: nvidia-toolkit-installer
    spec:
      nodeSelector:
        kubernetes.io/hostname: yeezyai
      hostNetwork: true
      hostPID: true
      containers:
      - name: installer
        image: ubuntu:24.04
        command: ["/bin/bash", "/scripts/install.sh"]
        securityContext:
          privileged: true
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        - name: host-usr
          mountPath: /host/usr
        - name: host-var
          mountPath: /host/var
        - name: host-etc
          mountPath: /host/etc
        - name: host-tmp
          mountPath: /host/tmp
        env:
        - name: DEBIAN_FRONTEND
          value: "noninteractive"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
      volumes:
      - name: scripts
        configMap:
          name: nvidia-toolkit-installer-script
          defaultMode: 0755
      - name: host-usr
        hostPath:
          path: /usr
      - name: host-var
        hostPath:
          path: /var
      - name: host-etc
        hostPath:
          path: /etc
      - name: host-tmp
        hostPath:
          path: /tmp